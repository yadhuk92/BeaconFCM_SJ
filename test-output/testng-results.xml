<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="396" passed="372" failed="24" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-12T22:42:31 IST" name="Beacon FCM Regression Automation Suite" finished-at="2025-05-13T05:21:00 IST" duration-ms="23909113">
    <groups>
    </groups>
    <test started-at="2025-05-12T22:42:31 IST" name="Core - Disposition" finished-at="2025-05-12T22:51:16 IST" duration-ms="524931">
      <class name="Core.Disposition.Updation_Of_Disposition_Test">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:48:07 IST" name="SetUp" finished-at="2025-05-12T22:49:06 IST" duration-ms="59153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:06 IST" name="setupTest" finished-at="2025-05-12T22:49:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Open_Updation_of_Disposition_Screen() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Open_Updation_of_Disposition_Screen()[pri:1, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:06 IST" name="Open_Updation_of_Disposition_Screen" finished-at="2025-05-12T22:49:10 IST" duration-ms="4451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Open_Updation_of_Disposition_Screen -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:49:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Open_Updation_of_Disposition_Screen status=SUCCESS method=Updation_Of_Disposition_Test.Open_Updation_of_Disposition_Screen()[pri:1, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:11 IST" name="setupTest" finished-at="2025-05-12T22:49:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Account_Number_Field__ECP_Validations(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field__ECP_Validations(java.util.Map)[pri:2, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:11 IST" name="Account_Number_Field__ECP_Validations" data-provider="TestData" finished-at="2025-05-12T22:49:14 IST" duration-ms="3208" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field__ECP_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:49:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field__ECP_Validations status=SUCCESS method=Updation_Of_Disposition_Test.Account_Number_Field__ECP_Validations(java.util.Map)[pri:2, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:14 IST" name="setupTest" finished-at="2025-05-12T22:49:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Attempt_to_Enter_More_than_25_Characters(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Attempt_to_Enter_More_than_25_Characters(java.util.Map)[pri:3, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:14 IST" name="Attempt_to_Enter_More_than_25_Characters" data-provider="TestData" finished-at="2025-05-12T22:49:17 IST" duration-ms="3123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Attempt_to_Enter_More_than_25_Characters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:49:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Attempt_to_Enter_More_than_25_Characters status=SUCCESS method=Updation_Of_Disposition_Test.Attempt_to_Enter_More_than_25_Characters(java.util.Map)[pri:3, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:17 IST" name="setupTest" finished-at="2025-05-12T22:49:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Enter_Invalid_Account_Number_and_Search(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Invalid_Account_Number_and_Search(java.util.Map)[pri:4, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:17 IST" name="Enter_Invalid_Account_Number_and_Search" data-provider="TestData" finished-at="2025-05-12T22:49:27 IST" duration-ms="10086" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Invalid_Account_Number_and_Search -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:49:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Invalid_Account_Number_and_Search status=SUCCESS method=Updation_Of_Disposition_Test.Enter_Invalid_Account_Number_and_Search(java.util.Map)[pri:4, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:27 IST" name="setupTest" finished-at="2025-05-12T22:49:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Search_with_Empty_Account_Number_Field() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Empty_Account_Number_Field()[pri:5, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:27 IST" name="Search_with_Empty_Account_Number_Field" finished-at="2025-05-12T22:49:36 IST" duration-ms="8937" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Empty_Account_Number_Field -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:49:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Empty_Account_Number_Field status=SUCCESS method=Updation_Of_Disposition_Test.Search_with_Empty_Account_Number_Field()[pri:5, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:36 IST" name="setupTest" finished-at="2025-05-12T22:49:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search()[pri:6, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:49:36 IST" name="Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search" finished-at="2025-05-12T22:50:03 IST" duration-ms="27457" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search status=SUCCESS method=Updation_Of_Disposition_Test.Enter_invalid_Account_Number_which_is_user_not_assigned_branches_and_Search()[pri:6, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:03 IST" name="setupTest" finished-at="2025-05-12T22:50:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Enter_Valid_Account_Number_and_Search() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Valid_Account_Number_and_Search()[pri:7, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:03 IST" name="Enter_Valid_Account_Number_and_Search" finished-at="2025-05-12T22:50:19 IST" duration-ms="15655" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Valid_Account_Number_and_Search -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Valid_Account_Number_and_Search status=SUCCESS method=Updation_Of_Disposition_Test.Enter_Valid_Account_Number_and_Search()[pri:7, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:19 IST" name="setupTest" finished-at="2025-05-12T22:50:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__All_Fields_Missing_Validation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Interaction_Details__All_Fields_Missing_Validation()[pri:8, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:19 IST" name="Add_New_Interaction_Details__All_Fields_Missing_Validation" finished-at="2025-05-12T22:50:24 IST" duration-ms="5340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__All_Fields_Missing_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__All_Fields_Missing_Validation status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__All_Fields_Missing_Validation()[pri:8, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:25 IST" name="setupTest" finished-at="2025-05-12T22:50:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__Disposition_Missing_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Interaction_Details__Disposition_Missing_Validation(java.util.Map)[pri:9, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:25 IST" name="Add_New_Interaction_Details__Disposition_Missing_Validation" data-provider="TestData" finished-at="2025-05-12T22:50:30 IST" duration-ms="5612" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__Disposition_Missing_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__Disposition_Missing_Validation status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__Disposition_Missing_Validation(java.util.Map)[pri:9, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Add_New_Interaction_Details__Sub_Disposition_Missing_Validation(java.util.Map)[pri:10, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:30 IST" name="Add_New_Interaction_Details__Sub_Disposition_Missing_Validation" data-provider="TestData" finished-at="2025-05-12T22:50:37 IST" duration-ms="6331" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__Sub_Disposition_Missing_Validation -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:30 IST" name="setupTest" finished-at="2025-05-12T22:50:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__Sub_Disposition_Missing_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:37 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__Sub_Disposition_Missing_Validation status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__Sub_Disposition_Missing_Validation(java.util.Map)[pri:10, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:37 IST" name="setupTest" finished-at="2025-05-12T22:50:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__NextAction_Date_Missing_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Interaction_Details__NextAction_Date_Missing_Validation(java.util.Map)[pri:11, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:37 IST" name="Add_New_Interaction_Details__NextAction_Date_Missing_Validation" data-provider="TestData" finished-at="2025-05-12T22:50:42 IST" duration-ms="5635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__NextAction_Date_Missing_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__NextAction_Date_Missing_Validation status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__NextAction_Date_Missing_Validation(java.util.Map)[pri:11, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:42 IST" name="setupTest" finished-at="2025-05-12T22:50:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__Remark_Missing_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Interaction_Details__Remark_Missing_Validation(java.util.Map)[pri:12, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:42 IST" name="Add_New_Interaction_Details__Remark_Missing_Validation" data-provider="TestData" finished-at="2025-05-12T22:50:50 IST" duration-ms="7419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__Remark_Missing_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:50:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__Remark_Missing_Validation status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__Remark_Missing_Validation(java.util.Map)[pri:12, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Add_New_Interaction_Details__Successful_Form_Submission(java.util.Map)[pri:13, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:50 IST" name="Add_New_Interaction_Details__Successful_Form_Submission" data-provider="TestData" finished-at="2025-05-12T22:51:00 IST" duration-ms="10200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Interaction_Details__Successful_Form_Submission -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:50:50 IST" name="setupTest" finished-at="2025-05-12T22:50:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Add_New_Interaction_Details__Successful_Form_Submission(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:51:00 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:51:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Interaction_Details__Successful_Form_Submission status=SUCCESS method=Updation_Of_Disposition_Test.Add_New_Interaction_Details__Successful_Form_Submission(java.util.Map)[pri:13, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:51:00 IST" name="setupTest" finished-at="2025-05-12T22:51:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Updation_Of_Disposition_Test.Verify_successfully_saved_interaction_in_history_of_interaction_details_section(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_successfully_saved_interaction_in_history_of_interaction_details_section(java.util.Map)[pri:14, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:51:00 IST" name="Verify_successfully_saved_interaction_in_history_of_interaction_details_section" data-provider="TestData" finished-at="2025-05-12T22:51:15 IST" duration-ms="14871" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountNumberwithmorethan25characters=12345678901234500000000000000, ActionOwner=Internal User, Date=18, Disposition=My bank, Interactiondetailsdate=18-Dec-2024, InvalidAccountNumber=1231232123123210000000000, InvalidAccountNumbers=abcdefgh | !@#$%^&*(), Remarks=test, Run=Yes, Subdisposition=android, TestScenario=Updation_of_Disposition}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_successfully_saved_interaction_in_history_of_interaction_details_section -->
        <test-method is-config="true" signature="CloseBrowser()[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:51:15 IST" name="CloseBrowser" finished-at="2025-05-12T22:51:16 IST" duration-ms="1244" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseBrowser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8]" started-at="2025-05-12T22:51:15 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:51:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_successfully_saved_interaction_in_history_of_interaction_details_section status=SUCCESS method=Updation_Of_Disposition_Test.Verify_successfully_saved_interaction_in_history_of_interaction_details_section(java.util.Map)[pri:14, instance:Core.Disposition.Updation_Of_Disposition_Test@609cd4d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
      </class> <!-- Core.Disposition.Updation_Of_Disposition_Test -->
      <class name="Core.Disposition.Disposition_Master_Test">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:42:31 IST" name="SetUp" finished-at="2025-05-12T22:43:35 IST" duration-ms="63538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:43:35 IST" name="setupTest" finished-at="2025-05-12T22:43:35 IST" duration-ms="119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Disposition_Master_Navigation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Disposition_Master_Navigation()[pri:1, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:43:35 IST" name="Verify_Disposition_Master_Navigation" finished-at="2025-05-12T22:43:52 IST" duration-ms="16741" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Disposition_Master_Navigation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:43:52 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:43:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Disposition_Master_Navigation status=SUCCESS method=Disposition_Master_Test.Verify_Disposition_Master_Navigation()[pri:1, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:43:52 IST" name="setupTest" finished-at="2025-05-12T22:43:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Initial_Load_of_Active_Dispositions() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Initial_Load_of_Active_Dispositions()[pri:2, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:43:52 IST" name="Verify_Initial_Load_of_Active_Dispositions" finished-at="2025-05-12T22:44:25 IST" duration-ms="33111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Initial_Load_of_Active_Dispositions -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Initial_Load_of_Active_Dispositions status=SUCCESS method=Disposition_Master_Test.Verify_Initial_Load_of_Active_Dispositions()[pri:2, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:25 IST" name="setupTest" finished-at="2025-05-12T22:44:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Action_Owner_Dropdown_Selections() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Action_Owner_Dropdown_Selections()[pri:3, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:25 IST" name="Action_Owner_Dropdown_Selections" finished-at="2025-05-12T22:44:28 IST" duration-ms="3543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Action_Owner_Dropdown_Selections -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Action_Owner_Dropdown_Selections status=SUCCESS method=Disposition_Master_Test.Action_Owner_Dropdown_Selections()[pri:3, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:28 IST" name="setupTest" finished-at="2025-05-12T22:44:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Is_Active_Checkbox_Default_State() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Is_Active_Checkbox_Default_State()[pri:4, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:28 IST" name="Verify_Is_Active_Checkbox_Default_State" finished-at="2025-05-12T22:44:31 IST" duration-ms="3050" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Is_Active_Checkbox_Default_State -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Is_Active_Checkbox_Default_State status=SUCCESS method=Disposition_Master_Test.Verify_Is_Active_Checkbox_Default_State()[pri:4, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:31 IST" name="setupTest" finished-at="2025-05-12T22:44:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Action_Column_Options() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Action_Column_Options()[pri:5, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:31 IST" name="Verify_Action_Column_Options" finished-at="2025-05-12T22:44:35 IST" duration-ms="3219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Action_Column_Options -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Action_Column_Options status=SUCCESS method=Disposition_Master_Test.Verify_Action_Column_Options()[pri:5, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Status_Column_Appearance()[pri:6, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:35 IST" name="Verify_Status_Column_Appearance" finished-at="2025-05-12T22:44:38 IST" duration-ms="3180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Status_Column_Appearance -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:35 IST" name="setupTest" finished-at="2025-05-12T22:44:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Status_Column_Appearance() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:38 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Status_Column_Appearance status=SUCCESS method=Disposition_Master_Test.Verify_Status_Column_Appearance()[pri:6, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:38 IST" name="setupTest" finished-at="2025-05-12T22:44:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Validate_Pagination__Initial_Load() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Pagination__Initial_Load()[pri:7, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:38 IST" name="Validate_Pagination__Initial_Load" finished-at="2025-05-12T22:44:41 IST" duration-ms="3178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Pagination__Initial_Load -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:41 IST" name="setupTest" finished-at="2025-05-12T22:44:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Validate_Next_Button() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:41 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Pagination__Initial_Load status=SUCCESS method=Disposition_Master_Test.Validate_Pagination__Initial_Load()[pri:7, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Validate_Next_Button()[pri:8, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:41 IST" name="Validate_Next_Button" finished-at="2025-05-12T22:44:45 IST" duration-ms="4347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Next_Button -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Next_Button status=SUCCESS method=Disposition_Master_Test.Validate_Next_Button()[pri:8, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Validate_Previous_Button()[pri:9, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:45 IST" name="Validate_Previous_Button" finished-at="2025-05-12T22:44:49 IST" duration-ms="3826" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Previous_Button -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:45 IST" name="setupTest" finished-at="2025-05-12T22:44:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Validate_Previous_Button() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:44:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Previous_Button status=SUCCESS method=Disposition_Master_Test.Validate_Previous_Button()[pri:9, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:49 IST" name="setupTest" finished-at="2025-05-12T22:44:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Validate_Button__Jump_to_Last_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Button__Jump_to_Last_Page()[pri:10, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:44:49 IST" name="Validate_Button__Jump_to_Last_Page" finished-at="2025-05-12T22:45:03 IST" duration-ms="13811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Button__Jump_to_Last_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Button__Jump_to_Last_Page status=SUCCESS method=Disposition_Master_Test.Validate_Button__Jump_to_Last_Page()[pri:10, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:03 IST" name="setupTest" finished-at="2025-05-12T22:45:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Validate_Button__Jump_to_First_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Button__Jump_to_First_Page()[pri:11, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:03 IST" name="Validate_Button__Jump_to_First_Page" finished-at="2025-05-12T22:45:07 IST" duration-ms="3833" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Button__Jump_to_First_Page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:07 IST" name="setupTest" finished-at="2025-05-12T22:45:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Open_Add_Disposition_Form() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:07 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Button__Jump_to_First_Page status=SUCCESS method=Disposition_Master_Test.Validate_Button__Jump_to_First_Page()[pri:11, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Open_Add_Disposition_Form()[pri:12, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:07 IST" name="Open_Add_Disposition_Form" finished-at="2025-05-12T22:45:10 IST" duration-ms="3468" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Open_Add_Disposition_Form -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Open_Add_Disposition_Form status=SUCCESS method=Disposition_Master_Test.Open_Add_Disposition_Form()[pri:12, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:10 IST" name="setupTest" finished-at="2025-05-12T22:45:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Close_Add_Disposition_Form() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Close_Add_Disposition_Form()[pri:13, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:10 IST" name="Close_Add_Disposition_Form" finished-at="2025-05-12T22:45:13 IST" duration-ms="3207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Close_Add_Disposition_Form -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Close_Add_Disposition_Form status=SUCCESS method=Disposition_Master_Test.Close_Add_Disposition_Form()[pri:13, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Add_Disposition__Submit_with_All_Fields_Valid(java.util.Map)[pri:14, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:14 IST" name="Add_Disposition__Submit_with_All_Fields_Valid" data-provider="TestData" finished-at="2025-05-12T22:45:19 IST" duration-ms="4916" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_Disposition__Submit_with_All_Fields_Valid -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:14 IST" name="setupTest" finished-at="2025-05-12T22:45:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Add_Disposition__Submit_with_All_Fields_Valid(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_Disposition__Submit_with_All_Fields_Valid status=SUCCESS method=Disposition_Master_Test.Add_Disposition__Submit_with_All_Fields_Valid(java.util.Map)[pri:14, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Test_Disposition_Grid_Visibility(java.util.Map)[pri:15, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:19 IST" name="Test_Disposition_Grid_Visibility" data-provider="TestData" finished-at="2025-05-12T22:45:23 IST" duration-ms="3157" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Disposition_Grid_Visibility -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:19 IST" name="setupTest" finished-at="2025-05-12T22:45:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Test_Disposition_Grid_Visibility(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:23 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Disposition_Grid_Visibility status=SUCCESS method=Disposition_Master_Test.Test_Disposition_Grid_Visibility(java.util.Map)[pri:15, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:23 IST" name="setupTest" finished-at="2025-05-12T22:45:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Action_Owner_Multi_select_Functionality(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Action_Owner_Multi_select_Functionality(java.util.Map)[pri:16, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:23 IST" name="Action_Owner_Multi_select_Functionality" data-provider="TestData" finished-at="2025-05-12T22:45:27 IST" duration-ms="4199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Action_Owner_Multi_select_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Action_Owner_Multi_select_Functionality status=SUCCESS method=Disposition_Master_Test.Action_Owner_Multi_select_Functionality(java.util.Map)[pri:16, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:27 IST" name="setupTest" finished-at="2025-05-12T22:45:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Asset_Category_Multi_select_Functionality(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_Multi_select_Functionality(java.util.Map)[pri:17, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:27 IST" name="Asset_Category_Multi_select_Functionality" data-provider="TestData" finished-at="2025-05-12T22:45:30 IST" duration-ms="3388" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_Multi_select_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_Multi_select_Functionality status=SUCCESS method=Disposition_Master_Test.Asset_Category_Multi_select_Functionality(java.util.Map)[pri:17, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Select_All_Functionality__Action_Owner()[pri:18, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:30 IST" name="Select_All_Functionality__Action_Owner" finished-at="2025-05-12T22:45:34 IST" duration-ms="4022" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_All_Functionality__Action_Owner -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:30 IST" name="setupTest" finished-at="2025-05-12T22:45:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Select_All_Functionality__Action_Owner() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_All_Functionality__Action_Owner status=SUCCESS method=Disposition_Master_Test.Select_All_Functionality__Action_Owner()[pri:18, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:34 IST" name="setupTest" finished-at="2025-05-12T22:45:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Deselecting_Via_Multi_select__Action_Owner() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Deselecting_Via_Multi_select__Action_Owner()[pri:19, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:34 IST" name="Deselecting_Via_Multi_select__Action_Owner" finished-at="2025-05-12T22:45:37 IST" duration-ms="3115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deselecting_Via_Multi_select__Action_Owner -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:37 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deselecting_Via_Multi_select__Action_Owner status=SUCCESS method=Disposition_Master_Test.Deselecting_Via_Multi_select__Action_Owner()[pri:19, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:37 IST" name="setupTest" finished-at="2025-05-12T22:45:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Select_All_Functionality__Asset_Category() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_All_Functionality__Asset_Category()[pri:20, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:37 IST" name="Select_All_Functionality__Asset_Category" finished-at="2025-05-12T22:45:41 IST" duration-ms="3215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_All_Functionality__Asset_Category -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:41 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_All_Functionality__Asset_Category status=SUCCESS method=Disposition_Master_Test.Select_All_Functionality__Asset_Category()[pri:20, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Deselecting_Via_Multi_select__Asset_Category()[pri:21, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:41 IST" name="Deselecting_Via_Multi_select__Asset_Category" finished-at="2025-05-12T22:45:44 IST" duration-ms="3121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deselecting_Via_Multi_select__Asset_Category -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:41 IST" name="setupTest" finished-at="2025-05-12T22:45:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Deselecting_Via_Multi_select__Asset_Category() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:44 IST" name="setupTest" finished-at="2025-05-12T22:45:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Add_Disposition_without_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deselecting_Via_Multi_select__Asset_Category status=SUCCESS method=Disposition_Master_Test.Deselecting_Via_Multi_select__Asset_Category()[pri:21, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Add_Disposition_without_Selection()[pri:22, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:44 IST" name="Verify_Add_Disposition_without_Selection" finished-at="2025-05-12T22:45:48 IST" duration-ms="3957" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Add_Disposition_without_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Add_Disposition_without_Selection status=SUCCESS method=Disposition_Master_Test.Verify_Add_Disposition_without_Selection()[pri:22, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:48 IST" name="setupTest" finished-at="2025-05-12T22:45:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Add_Disposition_with_Existing_Name(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_Disposition_with_Existing_Name(java.util.Map)[pri:23, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:48 IST" name="Add_Disposition_with_Existing_Name" data-provider="TestData" finished-at="2025-05-12T22:45:53 IST" duration-ms="4903" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_Disposition_with_Existing_Name -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_Disposition_with_Existing_Name status=SUCCESS method=Disposition_Master_Test.Add_Disposition_with_Existing_Name(java.util.Map)[pri:23, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:53 IST" name="setupTest" finished-at="2025-05-12T22:45:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Edit_Disposition_Popup_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Edit_Disposition_Popup_Display()[pri:24, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:53 IST" name="Edit_Disposition_Popup_Display" finished-at="2025-05-12T22:45:59 IST" duration-ms="6551" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_Disposition_Popup_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:45:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Edit_Disposition_Popup_Display status=SUCCESS method=Disposition_Master_Test.Edit_Disposition_Popup_Display()[pri:24, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:59 IST" name="setupTest" finished-at="2025-05-12T22:45:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Update_Without_Changes() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Update_Without_Changes()[pri:25, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:45:59 IST" name="Update_Without_Changes" finished-at="2025-05-12T22:46:03 IST" duration-ms="3724" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Update_Without_Changes -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Update_Without_Changes status=SUCCESS method=Disposition_Master_Test.Update_Without_Changes()[pri:25, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:03 IST" name="setupTest" finished-at="2025-05-12T22:46:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Add_Disposition_with_Valid_Data(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Add_Disposition_with_Valid_Data(java.util.Map)[pri:26, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:03 IST" name="Verify_Add_Disposition_with_Valid_Data" data-provider="TestData" finished-at="2025-05-12T22:46:10 IST" duration-ms="6559" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Add_Disposition_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Add_Disposition_with_Valid_Data status=SUCCESS method=Disposition_Master_Test.Verify_Add_Disposition_with_Valid_Data(java.util.Map)[pri:26, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:10 IST" name="setupTest" finished-at="2025-05-12T22:46:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Change_Name_to_Existing_and_Update(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Change_Name_to_Existing_and_Update(java.util.Map)[pri:27, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:10 IST" name="Change_Name_to_Existing_and_Update" data-provider="TestData" finished-at="2025-05-12T22:46:14 IST" duration-ms="4710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Change_Name_to_Existing_and_Update -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Change_Name_to_Existing_and_Update status=SUCCESS method=Disposition_Master_Test.Change_Name_to_Existing_and_Update(java.util.Map)[pri:27, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:14 IST" name="setupTest" finished-at="2025-05-12T22:46:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Edit_and_Verify_Disposition_Changes(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Edit_and_Verify_Disposition_Changes(java.util.Map)[pri:28, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:14 IST" name="Edit_and_Verify_Disposition_Changes" data-provider="TestData" finished-at="2025-05-12T22:46:27 IST" duration-ms="12372" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_and_Verify_Disposition_Changes -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Edit_and_Verify_Disposition_Changes status=SUCCESS method=Disposition_Master_Test.Edit_and_Verify_Disposition_Changes(java.util.Map)[pri:28, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:27 IST" name="setupTest" finished-at="2025-05-12T22:46:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Deactivate_Disposition() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Deactivate_Disposition()[pri:29, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:27 IST" name="Deactivate_Disposition" finished-at="2025-05-12T22:46:31 IST" duration-ms="4383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deactivate_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deactivate_Disposition status=SUCCESS method=Disposition_Master_Test.Deactivate_Disposition()[pri:29, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_Deactivated_Disposition(java.util.Map)[pri:30, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:31 IST" name="Search_Deactivated_Disposition" data-provider="TestData" finished-at="2025-05-12T22:46:36 IST" duration-ms="4460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Deactivated_Disposition -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:31 IST" name="setupTest" finished-at="2025-05-12T22:46:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Search_Deactivated_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:36 IST" name="setupTest" finished-at="2025-05-12T22:46:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Activate_Deactivated_Disposition() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Deactivated_Disposition status=SUCCESS method=Disposition_Master_Test.Search_Deactivated_Disposition(java.util.Map)[pri:30, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Activate_Deactivated_Disposition()[pri:31, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:36 IST" name="Activate_Deactivated_Disposition" finished-at="2025-05-12T22:46:40 IST" duration-ms="4355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Activate_Deactivated_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Activate_Deactivated_Disposition status=SUCCESS method=Disposition_Master_Test.Activate_Deactivated_Disposition()[pri:31, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:40 IST" name="setupTest" finished-at="2025-05-12T22:46:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Search_Active_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Active_Disposition(java.util.Map)[pri:32, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:40 IST" name="Search_Active_Disposition" data-provider="TestData" finished-at="2025-05-12T22:46:45 IST" duration-ms="4358" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Active_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Active_Disposition status=SUCCESS method=Disposition_Master_Test.Search_Active_Disposition(java.util.Map)[pri:32, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:45 IST" name="setupTest" finished-at="2025-05-12T22:46:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Sub_Disposition_Tab_UI_Elements() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Sub_Disposition_Tab_UI_Elements()[pri:33, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:45 IST" name="Verify_Sub_Disposition_Tab_UI_Elements" finished-at="2025-05-12T22:46:48 IST" duration-ms="3274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Sub_Disposition_Tab_UI_Elements -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Sub_Disposition_Tab_UI_Elements status=SUCCESS method=Disposition_Master_Test.Verify_Sub_Disposition_Tab_UI_Elements()[pri:33, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:48 IST" name="setupTest" finished-at="2025-05-12T22:46:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Verify_Add_Sub_Disposition_Popup() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Add_Sub_Disposition_Popup()[pri:34, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:48 IST" name="Verify_Add_Sub_Disposition_Popup" finished-at="2025-05-12T22:46:51 IST" duration-ms="3355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Add_Sub_Disposition_Popup -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Add_Sub_Disposition_Popup status=SUCCESS method=Disposition_Master_Test.Verify_Add_Sub_Disposition_Popup()[pri:34, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:51 IST" name="setupTest" finished-at="2025-05-12T22:46:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Close_Add_Sub_Disposition_Popup() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Close_Add_Sub_Disposition_Popup()[pri:35, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:51 IST" name="Close_Add_Sub_Disposition_Popup" finished-at="2025-05-12T22:46:54 IST" duration-ms="3139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Close_Add_Sub_Disposition_Popup -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:46:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Close_Add_Sub_Disposition_Popup status=SUCCESS method=Disposition_Master_Test.Close_Add_Sub_Disposition_Popup()[pri:35, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:54 IST" name="setupTest" finished-at="2025-05-12T22:46:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Add_New_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Sub_Disposition(java.util.Map)[pri:36, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:46:54 IST" name="Add_New_Sub_Disposition" data-provider="TestData" finished-at="2025-05-12T22:47:03 IST" duration-ms="8994" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Add_New_Sub_Disposition(java.util.Map)[pri:36, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:03 IST" name="setupTest" finished-at="2025-05-12T22:47:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Add_Duplicate_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_Duplicate_Sub_Disposition(java.util.Map)[pri:37, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:03 IST" name="Add_Duplicate_Sub_Disposition" data-provider="TestData" finished-at="2025-05-12T22:47:12 IST" duration-ms="9010" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_Duplicate_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:12 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_Duplicate_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Add_Duplicate_Sub_Disposition(java.util.Map)[pri:37, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Edit_Sub_Disposition_Popup_Display()[pri:38, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:12 IST" name="Edit_Sub_Disposition_Popup_Display" finished-at="2025-05-12T22:47:18 IST" duration-ms="5728" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_Sub_Disposition_Popup_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:12 IST" name="setupTest" finished-at="2025-05-12T22:47:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Edit_Sub_Disposition_Popup_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:18 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Edit_Sub_Disposition_Popup_Display status=SUCCESS method=Disposition_Master_Test.Edit_Sub_Disposition_Popup_Display()[pri:38, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:18 IST" name="setupTest" finished-at="2025-05-12T22:47:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Update_Sub_Disposition_Without_Changes() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Update_Sub_Disposition_Without_Changes()[pri:39, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:18 IST" name="Update_Sub_Disposition_Without_Changes" finished-at="2025-05-12T22:47:23 IST" duration-ms="4603" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Update_Sub_Disposition_Without_Changes -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:23 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Update_Sub_Disposition_Without_Changes status=SUCCESS method=Disposition_Master_Test.Update_Sub_Disposition_Without_Changes()[pri:39, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:23 IST" name="setupTest" finished-at="2025-05-12T22:47:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Update_Sub_Disposition_with_Duplicate_Name(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Update_Sub_Disposition_with_Duplicate_Name(java.util.Map)[pri:40, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:23 IST" name="Update_Sub_Disposition_with_Duplicate_Name" data-provider="TestData" finished-at="2025-05-12T22:47:28 IST" duration-ms="5526" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Update_Sub_Disposition_with_Duplicate_Name -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Update_Sub_Disposition_with_Duplicate_Name status=SUCCESS method=Disposition_Master_Test.Update_Sub_Disposition_with_Duplicate_Name(java.util.Map)[pri:40, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:28 IST" name="setupTest" finished-at="2025-05-12T22:47:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Update_Sub_Disposition_Successfully(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Update_Sub_Disposition_Successfully(java.util.Map)[pri:41, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:28 IST" name="Update_Sub_Disposition_Successfully" data-provider="TestData" finished-at="2025-05-12T22:47:36 IST" duration-ms="7653" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Update_Sub_Disposition_Successfully -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:36 IST" name="setupTest" finished-at="2025-05-12T22:47:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Deactivate_Sub_Disposition() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Update_Sub_Disposition_Successfully status=SUCCESS method=Disposition_Master_Test.Update_Sub_Disposition_Successfully(java.util.Map)[pri:41, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Deactivate_Sub_Disposition()[pri:42, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:36 IST" name="Deactivate_Sub_Disposition" finished-at="2025-05-12T22:47:43 IST" duration-ms="6489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deactivate_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deactivate_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Deactivate_Sub_Disposition()[pri:42, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:43 IST" name="setupTest" finished-at="2025-05-12T22:47:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Search_Deactivated_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Deactivated_Sub_Disposition(java.util.Map)[pri:43, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:43 IST" name="Search_Deactivated_Sub_Disposition" data-provider="TestData" finished-at="2025-05-12T22:47:49 IST" duration-ms="6574" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Deactivated_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Deactivated_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Search_Deactivated_Sub_Disposition(java.util.Map)[pri:43, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:49 IST" name="setupTest" finished-at="2025-05-12T22:47:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Reactivate_Sub_Disposition() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Reactivate_Sub_Disposition()[pri:44, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:49 IST" name="Reactivate_Sub_Disposition" finished-at="2025-05-12T22:47:54 IST" duration-ms="4478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reactivate_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:47:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Reactivate_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Reactivate_Sub_Disposition()[pri:44, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:54 IST" name="setupTest" finished-at="2025-05-12T22:47:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Disposition.Disposition_Master_Test.Search_Active_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Active_Sub_Disposition(java.util.Map)[pri:45, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:47:54 IST" name="Search_Active_Sub_Disposition" data-provider="TestData" finished-at="2025-05-12T22:48:05 IST" duration-ms="11594" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionOwner=Internal User, ActionOwnerforsubdisposition=Call Centre, ActionOwners=Internal User | Collection Agency | Call Centre, ActionOwnerSearch=Call Centre, ActionOwnerUpdate=Call Centre, ActiveActionOwnerforsubdispositionSearch=Call Centre, AssetCategories=NPA Category | SMA Category, AssetCategory=NPA Category, AssetCategoryUpdate=SMA Category, DeactivatedActionOwnerforsubdispositionSearch=Call Centre, ExistingName=Irfan, Name=Tanson13, Nameforsubdisposition=Tanson16, Nameforsubdisposition2=Tanson18, NameUpdate=Tanson15, project=Beacon FCM, Run=Yes, TestScenario=Disposition_master, UpdateExistingName=Tanson14, UpdateExistingNameofsubdispositiontoNew=Tanson17}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Active_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:48:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:48:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Active_Sub_Disposition status=SUCCESS method=Disposition_Master_Test.Search_Active_Sub_Disposition(java.util.Map)[pri:45, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="CloseBrowser()[pri:0, instance:Core.Disposition.Disposition_Master_Test@22fcf7ab]" started-at="2025-05-12T22:48:05 IST" name="CloseBrowser" finished-at="2025-05-12T22:48:07 IST" duration-ms="1595" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseBrowser -->
      </class> <!-- Core.Disposition.Disposition_Master_Test -->
    </test> <!-- Core - Disposition -->
    <test started-at="2025-05-12T22:51:16 IST" name="Core - Call centre" finished-at="2025-05-12T23:15:38 IST" duration-ms="1462316">
      <class name="Core.CallCentre.AutoAllocation_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:51:16 IST" name="SetUp" finished-at="2025-05-12T22:52:08 IST" duration-ms="51425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:08 IST" name="setupTest" finished-at="2025-05-12T22:52:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:08 IST" name="Login_to_call_centre_application_and_take_account_filtration_page" finished-at="2025-05-12T22:52:12 IST" duration-ms="4626" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_account_filtration_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:12 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_account_filtration_page status=SUCCESS method=AutoAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:12 IST" name="setupTest" finished-at="2025-05-12T22:52:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Allocated_To_dropdown_mandatory_checking() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_dropdown_mandatory_checking()[pri:2, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:12 IST" name="Allocated_To_dropdown_mandatory_checking" finished-at="2025-05-12T22:52:21 IST" duration-ms="9132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:21 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_dropdown_mandatory_checking status=SUCCESS method=AutoAllocation_TestClass.Allocated_To_dropdown_mandatory_checking()[pri:2, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:21 IST" name="setupTest" finished-at="2025-05-12T22:52:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Asset_category_dropdown_mandatory_checking(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:21 IST" name="Asset_category_dropdown_mandatory_checking" data-provider="TestData" finished-at="2025-05-12T22:52:30 IST" duration-ms="9131" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_category_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:30 IST" name="setupTest" finished-at="2025-05-12T22:52:30 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_SMA_and_NPA_Categories() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_category_dropdown_mandatory_checking status=SUCCESS method=AutoAllocation_TestClass.Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Select_SMA_and_NPA_Categories()[pri:4, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:30 IST" name="Select_SMA_and_NPA_Categories" finished-at="2025-05-12T22:52:36 IST" duration-ms="5087" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_SMA_and_NPA_Categories -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_SMA_and_NPA_Categories status=SUCCESS method=AutoAllocation_TestClass.Select_SMA_and_NPA_Categories()[pri:4, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:36 IST" name="setupTest" finished-at="2025-05-12T22:52:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.SMA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Selection()[pri:5, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:36 IST" name="SMA_Category_Selection" finished-at="2025-05-12T22:52:39 IST" duration-ms="3426" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:39 IST" name="setupTest" finished-at="2025-05-12T22:52:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.NPA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection status=SUCCESS method=AutoAllocation_TestClass.SMA_Category_Selection()[pri:5, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="NPA_Category_Selection()[pri:6, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:39 IST" name="NPA_Category_Selection" finished-at="2025-05-12T22:52:42 IST" duration-ms="3427" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection status=SUCCESS method=AutoAllocation_TestClass.NPA_Category_Selection()[pri:6, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:42 IST" name="setupTest" finished-at="2025-05-12T22:52:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Allocation_Type_Selection__Auto(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection__Auto(java.util.Map)[pri:7, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:42 IST" name="Allocation_Type_Selection__Auto" data-provider="TestData" finished-at="2025-05-12T22:52:47 IST" duration-ms="4124" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection__Auto -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection__Auto status=SUCCESS method=AutoAllocation_TestClass.Allocation_Type_Selection__Auto(java.util.Map)[pri:7, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:47 IST" name="setupTest" finished-at="2025-05-12T22:52:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Perform_Search_with_Valid_Data() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Perform_Search_with_Valid_Data()[pri:8, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:47 IST" name="Perform_Search_with_Valid_Data" finished-at="2025-05-12T22:52:53 IST" duration-ms="6050" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Perform_Search_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:52:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Perform_Search_with_Valid_Data status=SUCCESS method=AutoAllocation_TestClass.Perform_Search_with_Valid_Data()[pri:8, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:53 IST" name="setupTest" finished-at="2025-05-12T22:52:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load()[pri:9, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:52:53 IST" name="Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load" finished-at="2025-05-12T22:54:04 IST" duration-ms="71509" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:04 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:54:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load status=SUCCESS method=AutoAllocation_TestClass.Login_to_beacon_fcm_core_application_Verify_Auto_Allocation_Page_Load()[pri:9, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:04 IST" name="setupTest" finished-at="2025-05-12T22:54:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Fields_and_Buttons_on_Auto_Allocation_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_and_Buttons_on_Auto_Allocation_Page()[pri:10, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:04 IST" name="Verify_Fields_and_Buttons_on_Auto_Allocation_Page" finished-at="2025-05-12T22:54:08 IST" duration-ms="3860" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_and_Buttons_on_Auto_Allocation_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:08 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:54:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_and_Buttons_on_Auto_Allocation_Page status=SUCCESS method=AutoAllocation_TestClass.Verify_Fields_and_Buttons_on_Auto_Allocation_Page()[pri:10, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:08 IST" name="setupTest" finished-at="2025-05-12T22:54:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Enter_Allocation_Name_with_Alphabets(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Allocation_Name_with_Alphabets(java.util.Map)[pri:11, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:08 IST" name="Enter_Allocation_Name_with_Alphabets" data-provider="TestData" finished-at="2025-05-12T22:54:12 IST" duration-ms="3517" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Allocation_Name_with_Alphabets -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:12 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:54:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Allocation_Name_with_Alphabets status=SUCCESS method=AutoAllocation_TestClass.Enter_Allocation_Name_with_Alphabets(java.util.Map)[pri:11, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:12 IST" name="setupTest" finished-at="2025-05-12T22:54:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_effect_Date_from_Date_Picker(java.util.Map) throws bsh.ParseException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_effect_Date_from_Date_Picker(java.util.Map)[pri:12, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:12 IST" name="Select_effect_Date_from_Date_Picker" data-provider="TestData" finished-at="2025-05-12T22:54:15 IST" duration-ms="3386" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_effect_Date_from_Date_Picker -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:15 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:54:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_effect_Date_from_Date_Picker status=SUCCESS method=AutoAllocation_TestClass.Select_effect_Date_from_Date_Picker(java.util.Map)[pri:12, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:15 IST" name="setupTest" finished-at="2025-05-12T22:54:15 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_NPA_and_SMA_Category_Checkbox() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_NPA_and_SMA_Category_Checkbox()[pri:13, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:54:15 IST" name="Select_NPA_and_SMA_Category_Checkbox" finished-at="2025-05-12T22:55:00 IST" duration-ms="45371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_NPA_and_SMA_Category_Checkbox -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:00 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_NPA_and_SMA_Category_Checkbox status=SUCCESS method=AutoAllocation_TestClass.Select_NPA_and_SMA_Category_Checkbox()[pri:13, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:00 IST" name="setupTest" finished-at="2025-05-12T22:55:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_Zone_from_Dropdown(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Zone_from_Dropdown(java.util.Map)[pri:14, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:00 IST" name="Select_Zone_from_Dropdown" data-provider="TestData" finished-at="2025-05-12T22:55:09 IST" duration-ms="8374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Zone_from_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Zone_from_Dropdown status=SUCCESS method=AutoAllocation_TestClass.Select_Zone_from_Dropdown(java.util.Map)[pri:14, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:09 IST" name="setupTest" finished-at="2025-05-12T22:55:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_Processing_Interval_from_Dropdown(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Processing_Interval_from_Dropdown(java.util.Map)[pri:15, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:09 IST" name="Select_Processing_Interval_from_Dropdown" data-provider="TestData" finished-at="2025-05-12T22:55:17 IST" duration-ms="8432" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Processing_Interval_from_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Processing_Interval_from_Dropdown status=SUCCESS method=AutoAllocation_TestClass.Select_Processing_Interval_from_Dropdown(java.util.Map)[pri:15, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:17 IST" name="setupTest" finished-at="2025-05-12T22:55:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_To_Dropdown(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_To_Dropdown(java.util.Map)[pri:16, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:17 IST" name="Select_To_Dropdown" data-provider="TestData" finished-at="2025-05-12T22:55:26 IST" duration-ms="8476" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_To_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:26 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_To_Dropdown status=SUCCESS method=AutoAllocation_TestClass.Select_To_Dropdown(java.util.Map)[pri:16, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:26 IST" name="setupTest" finished-at="2025-05-12T22:55:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Add_New_Allocation_Name(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_New_Allocation_Name(java.util.Map)[pri:17, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:26 IST" name="Add_New_Allocation_Name" data-provider="TestData" finished-at="2025-05-12T22:55:30 IST" duration-ms="3980" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Allocation_Name -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Allocation_Name status=SUCCESS method=AutoAllocation_TestClass.Add_New_Allocation_Name(java.util.Map)[pri:17, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:30 IST" name="setupTest" finished-at="2025-05-12T22:55:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Allocation_Name_Status_After_Creation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Allocation_Name_Status_After_Creation()[pri:18, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:30 IST" name="Verify_Allocation_Name_Status_After_Creation" finished-at="2025-05-12T22:55:34 IST" duration-ms="4070" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Allocation_Name_Status_After_Creation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Allocation_Name_Status_After_Creation status=SUCCESS method=AutoAllocation_TestClass.Verify_Allocation_Name_Status_After_Creation()[pri:18, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:34 IST" name="setupTest" finished-at="2025-05-12T22:55:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Deactivate_Allocation_Name() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Deactivate_Allocation_Name()[pri:19, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:34 IST" name="Deactivate_Allocation_Name" finished-at="2025-05-12T22:55:46 IST" duration-ms="12111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deactivate_Allocation_Name -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:46 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deactivate_Allocation_Name status=SUCCESS method=AutoAllocation_TestClass.Deactivate_Allocation_Name()[pri:19, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:46 IST" name="setupTest" finished-at="2025-05-12T22:55:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Reactivate_Allocation_Name() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Reactivate_Allocation_Name()[pri:20, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:46 IST" name="Reactivate_Allocation_Name" finished-at="2025-05-12T22:55:59 IST" duration-ms="12566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reactivate_Allocation_Name -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:59 IST" name="setupTest" finished-at="2025-05-12T22:55:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Run_Database_Package_and_Verify_Accounts_Insertion() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:55:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Reactivate_Allocation_Name status=SUCCESS method=AutoAllocation_TestClass.Reactivate_Allocation_Name()[pri:20, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Run_Database_Package_and_Verify_Accounts_Insertion()[pri:21, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:55:59 IST" name="Run_Database_Package_and_Verify_Accounts_Insertion" finished-at="2025-05-12T22:58:44 IST" duration-ms="165896" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Run_Database_Package_and_Verify_Accounts_Insertion -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:58:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:58:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Run_Database_Package_and_Verify_Accounts_Insertion status=SUCCESS method=AutoAllocation_TestClass.Run_Database_Package_and_Verify_Accounts_Insertion()[pri:21, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:58:44 IST" name="setupTest" finished-at="2025-05-12T22:58:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_pages() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_account_filtration_pages()[pri:22, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:58:44 IST" name="Login_to_call_centre_application_and_take_account_filtration_pages" finished-at="2025-05-12T22:59:49 IST" duration-ms="64085" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_account_filtration_pages -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:59:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_account_filtration_pages status=SUCCESS method=AutoAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_pages()[pri:22, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:49 IST" name="setupTest" finished-at="2025-05-12T22:59:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Select_SMA_and_NPA_Categorie() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_SMA_and_NPA_Categorie()[pri:23, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:49 IST" name="Select_SMA_and_NPA_Categorie" finished-at="2025-05-12T22:59:54 IST" duration-ms="5109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_SMA_and_NPA_Categorie -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:59:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_SMA_and_NPA_Categorie status=SUCCESS method=AutoAllocation_TestClass.Select_SMA_and_NPA_Categorie()[pri:23, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:54 IST" name="setupTest" finished-at="2025-05-12T22:59:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.SMA_Category_Selections() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Selections()[pri:24, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:54 IST" name="SMA_Category_Selections" finished-at="2025-05-12T22:59:57 IST" duration-ms="3421" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selections -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T22:59:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selections status=SUCCESS method=AutoAllocation_TestClass.SMA_Category_Selections()[pri:24, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:57 IST" name="setupTest" finished-at="2025-05-12T22:59:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.NPA_Category_Selections(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Selections(java.util.Map)[pri:25, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T22:59:57 IST" name="NPA_Category_Selections" data-provider="TestData" finished-at="2025-05-12T23:00:01 IST" duration-ms="4071" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selections -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selections status=SUCCESS method=AutoAllocation_TestClass.NPA_Category_Selections(java.util.Map)[pri:25, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:01 IST" name="setupTest" finished-at="2025-05-12T23:00:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Allocation_Type_Selections__Auto(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selections__Auto(java.util.Map)[pri:26, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:01 IST" name="Allocation_Type_Selections__Auto" data-provider="TestData" finished-at="2025-05-12T23:00:06 IST" duration-ms="4281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selections__Auto -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selections__Auto status=SUCCESS method=AutoAllocation_TestClass.Allocation_Type_Selections__Auto(java.util.Map)[pri:26, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:06 IST" name="setupTest" finished-at="2025-05-12T23:00:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Allocated_To_Selection__Call_Centre(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_Selection__Call_Centre(java.util.Map)[pri:27, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:06 IST" name="Allocated_To_Selection__Call_Centre" data-provider="TestData" finished-at="2025-05-12T23:00:09 IST" duration-ms="3644" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_Selection__Call_Centre -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:09 IST" name="setupTest" finished-at="2025-05-12T23:00:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Perform_Search_with_Valid_Datas() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_Selection__Call_Centre status=SUCCESS method=AutoAllocation_TestClass.Allocated_To_Selection__Call_Centre(java.util.Map)[pri:27, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Perform_Search_with_Valid_Datas()[pri:28, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:09 IST" name="Perform_Search_with_Valid_Datas" finished-at="2025-05-12T23:00:17 IST" duration-ms="8117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Perform_Search_with_Valid_Datas -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Perform_Search_with_Valid_Datas status=SUCCESS method=AutoAllocation_TestClass.Perform_Search_with_Valid_Datas()[pri:28, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:17 IST" name="setupTest" finished-at="2025-05-12T23:00:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Total_Account_and_Amount_in_Grid() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Total_Account_and_Amount_in_Grid()[pri:29, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:17 IST" name="Verify_Total_Account_and_Amount_in_Grid" finished-at="2025-05-12T23:00:20 IST" duration-ms="3042" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Total_Account_and_Amount_in_Grid -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Total_Account_and_Amount_in_Grid status=SUCCESS method=AutoAllocation_TestClass.Verify_Total_Account_and_Amount_in_Grid()[pri:29, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:20 IST" name="setupTest" finished-at="2025-05-12T23:00:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Download_File__List_of_Accounts(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_File__List_of_Accounts(java.util.Map)[pri:30, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:20 IST" name="Download_File__List_of_Accounts" data-provider="TestData" finished-at="2025-05-12T23:00:30 IST" duration-ms="9539" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_File__List_of_Accounts -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_File__List_of_Accounts status=SUCCESS method=AutoAllocation_TestClass.Download_File__List_of_Accounts(java.util.Map)[pri:30, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:30 IST" name="setupTest" finished-at="2025-05-12T23:00:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Downloaded_File() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Downloaded_File()[pri:31, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:30 IST" name="Verify_Downloaded_File" finished-at="2025-05-12T23:00:33 IST" duration-ms="3082" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Downloaded_File status=SUCCESS method=AutoAllocation_TestClass.Verify_Downloaded_File()[pri:31, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:33 IST" name="setupTest" finished-at="2025-05-12T23:00:33 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Download_Dialer_File(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Dialer_File(java.util.Map)[pri:32, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:33 IST" name="Download_Dialer_File" data-provider="TestData" finished-at="2025-05-12T23:00:41 IST" duration-ms="7856" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Dialer_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:41 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Dialer_File status=SUCCESS method=AutoAllocation_TestClass.Download_Dialer_File(java.util.Map)[pri:32, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:41 IST" name="setupTest" finished-at="2025-05-12T23:00:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Dialer_Downloaded_File() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Dialer_Downloaded_File()[pri:33, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:41 IST" name="Verify_Dialer_Downloaded_File" finished-at="2025-05-12T23:00:44 IST" duration-ms="3042" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Dialer_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Dialer_Downloaded_File status=SUCCESS method=AutoAllocation_TestClass.Verify_Dialer_Downloaded_File()[pri:33, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:44 IST" name="setupTest" finished-at="2025-05-12T23:00:44 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Download_Invalid_MobileNo_Excel_File(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Invalid_MobileNo_Excel_File(java.util.Map)[pri:34, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:44 IST" name="Download_Invalid_MobileNo_Excel_File" data-provider="TestData" finished-at="2025-05-12T23:00:54 IST" duration-ms="9912" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Invalid_MobileNo_Excel_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Invalid_MobileNo_Excel_File status=SUCCESS method=AutoAllocation_TestClass.Download_Invalid_MobileNo_Excel_File(java.util.Map)[pri:34, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:54 IST" name="setupTest" finished-at="2025-05-12T23:00:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Invalid_Mobile_Number_Downloaded_File() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Invalid_Mobile_Number_Downloaded_File()[pri:35, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:54 IST" name="Verify_Invalid_Mobile_Number_Downloaded_File" finished-at="2025-05-12T23:00:57 IST" duration-ms="3023" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Invalid_Mobile_Number_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:00:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Invalid_Mobile_Number_Downloaded_File status=SUCCESS method=AutoAllocation_TestClass.Verify_Invalid_Mobile_Number_Downloaded_File()[pri:35, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Download_History(java.util.Map)[pri:36, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:57 IST" name="Verify_Download_History" data-provider="TestData" finished-at="2025-05-12T23:01:03 IST" duration-ms="5575" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationName=TestAllocation70, AllocationType=Auto Allocation, DialerFile=Dialer File - Excel, DownloadFile=List of Accounts - Excel, effectDate=12, InvalidMobileNoExcel=Invalid Mobile No - Excel, MobileNumber=A1299G465C, OutstandingBalance=12345, OutstandingBalanceOperator==, ProcessingInterval=Daily, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre, Zone=Mumbai}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Download_History -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:00:57 IST" name="setupTest" finished-at="2025-05-12T23:00:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.AutoAllocation_TestClass.Verify_Download_History(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:01:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:01:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Download_History status=SUCCESS method=AutoAllocation_TestClass.Verify_Download_History(java.util.Map)[pri:36, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.CallCentre.AutoAllocation_TestClass@2e1d27ba]" started-at="2025-05-12T23:01:03 IST" name="afterEachTest" finished-at="2025-05-12T23:01:06 IST" duration-ms="3462" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.CallCentre.AutoAllocation_TestClass -->
      <class name="Core.CallCentre.ManualAllocation_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:01:06 IST" name="SetUp" finished-at="2025-05-12T23:02:01 IST" duration-ms="54691" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:01 IST" name="setupTest" finished-at="2025-05-12T23:02:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:01 IST" name="Login_to_call_centre_application_and_take_account_filtration_page" finished-at="2025-05-12T23:02:05 IST" duration-ms="4622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_account_filtration_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_account_filtration_page status=SUCCESS method=ManualAllocation_TestClass.Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:05 IST" name="setupTest" finished-at="2025-05-12T23:02:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Allocated_To_dropdown_mandatory_checking() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_dropdown_mandatory_checking()[pri:2, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:05 IST" name="Allocated_To_dropdown_mandatory_checking" finished-at="2025-05-12T23:02:14 IST" duration-ms="9105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_dropdown_mandatory_checking status=SUCCESS method=ManualAllocation_TestClass.Allocated_To_dropdown_mandatory_checking()[pri:2, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:15 IST" name="setupTest" finished-at="2025-05-12T23:02:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Asset_category_dropdown_mandatory_checking(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:15 IST" name="Asset_category_dropdown_mandatory_checking" data-provider="TestData" finished-at="2025-05-12T23:02:24 IST" duration-ms="9273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_category_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_category_dropdown_mandatory_checking status=SUCCESS method=ManualAllocation_TestClass.Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:24 IST" name="setupTest" finished-at="2025-05-12T23:02:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_SMA_and_NPA_Categories() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_SMA_and_NPA_Categories()[pri:4, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:24 IST" name="Select_SMA_and_NPA_Categories" finished-at="2025-05-12T23:02:29 IST" duration-ms="5064" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_SMA_and_NPA_Categories -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:29 IST" name="setupTest" finished-at="2025-05-12T23:02:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.SMA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_SMA_and_NPA_Categories status=SUCCESS method=ManualAllocation_TestClass.Select_SMA_and_NPA_Categories()[pri:4, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="SMA_Category_Selection()[pri:5, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:29 IST" name="SMA_Category_Selection" finished-at="2025-05-12T23:02:32 IST" duration-ms="3430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection status=SUCCESS method=ManualAllocation_TestClass.SMA_Category_Selection()[pri:5, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:32 IST" name="setupTest" finished-at="2025-05-12T23:02:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.NPA_Category_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Selection_()[pri:6, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:32 IST" name="NPA_Category_Selection_" finished-at="2025-05-12T23:02:36 IST" duration-ms="3434" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection_ status=SUCCESS method=ManualAllocation_TestClass.NPA_Category_Selection_()[pri:6, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:36 IST" name="setupTest" finished-at="2025-05-12T23:02:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Allocation_Type_Selection_Manual_allocation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:36 IST" name="Allocation_Type_Selection_Manual_allocation" data-provider="TestData" finished-at="2025-05-12T23:02:40 IST" duration-ms="4156" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection_Manual_allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection_Manual_allocation status=SUCCESS method=ManualAllocation_TestClass.Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:40 IST" name="setupTest" finished-at="2025-05-12T23:02:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Perform_Search_with_Valid_Data() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Perform_Search_with_Valid_Data()[pri:8, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:40 IST" name="Perform_Search_with_Valid_Data" finished-at="2025-05-12T23:02:47 IST" duration-ms="6910" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Perform_Search_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:02:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Perform_Search_with_Valid_Data status=SUCCESS method=ManualAllocation_TestClass.Perform_Search_with_Valid_Data()[pri:8, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:47 IST" name="setupTest" finished-at="2025-05-12T23:02:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Login_and_Navigation_to_Manual_Allocation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:02:47 IST" name="Login_and_Navigation_to_Manual_Allocation" finished-at="2025-05-12T23:03:51 IST" duration-ms="64118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:03:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation status=SUCCESS method=ManualAllocation_TestClass.Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:51 IST" name="setupTest" finished-at="2025-05-12T23:03:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Verify_Fields_and_Buttons_on_Manual_Allocation_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:51 IST" name="Verify_Fields_and_Buttons_on_Manual_Allocation_Page" finished-at="2025-05-12T23:03:56 IST" duration-ms="4871" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_and_Buttons_on_Manual_Allocation_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:03:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_and_Buttons_on_Manual_Allocation_Page status=SUCCESS method=ManualAllocation_TestClass.Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:56 IST" name="setupTest" finished-at="2025-05-12T23:03:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Mandatory_Field_Validation_for_Asset_Category() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:03:56 IST" name="Mandatory_Field_Validation_for_Asset_Category" finished-at="2025-05-12T23:04:04 IST" duration-ms="8532" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:04 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category status=SUCCESS method=ManualAllocation_TestClass.Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:04 IST" name="setupTest" finished-at="2025-05-12T23:04:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Asset_Category_SMA_and_NPA_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:04 IST" name="Asset_Category_SMA_and_NPA_Selection" finished-at="2025-05-12T23:04:13 IST" duration-ms="8967" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection status=SUCCESS method=ManualAllocation_TestClass.Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:13 IST" name="setupTest" finished-at="2025-05-12T23:04:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.SMA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection()[pri:13, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:13 IST" name="SMA_Category_Dropdown_Selection" finished-at="2025-05-12T23:04:18 IST" duration-ms="4236" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:18 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection status=SUCCESS method=ManualAllocation_TestClass.SMA_Category_Dropdown_Selection()[pri:13, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:18 IST" name="setupTest" finished-at="2025-05-12T23:04:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.NPA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection()[pri:14, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:18 IST" name="NPA_Category_Dropdown_Selection" finished-at="2025-05-12T23:04:21 IST" duration-ms="3237" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:21 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection status=SUCCESS method=ManualAllocation_TestClass.NPA_Category_Dropdown_Selection()[pri:14, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:21 IST" name="setupTest" finished-at="2025-05-12T23:04:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.OS_Balance_Field_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:21 IST" name="OS_Balance_Field_Validation" data-provider="TestData" finished-at="2025-05-12T23:04:24 IST" duration-ms="3643" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation status=SUCCESS method=ManualAllocation_TestClass.OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:25 IST" name="setupTest" finished-at="2025-05-12T23:04:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.To_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:25 IST" name="To_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:04:28 IST" duration-ms="3457" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection status=SUCCESS method=ManualAllocation_TestClass.To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_with_Mandatory_Fields()[pri:17, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:28 IST" name="Search_with_Mandatory_Fields" finished-at="2025-05-12T23:04:39 IST" duration-ms="11048" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:28 IST" name="setupTest" finished-at="2025-05-12T23:04:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_with_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields status=SUCCESS method=ManualAllocation_TestClass.Search_with_Mandatory_Fields()[pri:17, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:39 IST" name="setupTest" finished-at="2025-05-12T23:04:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Download_Excel_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Excel_Functionality()[pri:18, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:39 IST" name="Download_Excel_Functionality" finished-at="2025-05-12T23:04:53 IST" duration-ms="13856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Excel_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Excel_Functionality status=SUCCESS method=ManualAllocation_TestClass.Download_Excel_Functionality()[pri:18, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Excel_Account_Count_Verification()[pri:19, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:53 IST" name="Excel_Account_Count_Verification" finished-at="2025-05-12T23:04:57 IST" duration-ms="3849" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Excel_Account_Count_Verification -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:53 IST" name="setupTest" finished-at="2025-05-12T23:04:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Excel_Account_Count_Verification() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:04:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Excel_Account_Count_Verification status=SUCCESS method=ManualAllocation_TestClass.Excel_Account_Count_Verification()[pri:19, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:57 IST" name="setupTest" finished-at="2025-05-12T23:04:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Login_to_call_centre_application_and_take_updation_of_disposition_page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:04:57 IST" name="Login_to_call_centre_application_and_take_updation_of_disposition_page" finished-at="2025-05-12T23:05:55 IST" duration-ms="58272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_updation_of_disposition_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:05:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:05:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_updation_of_disposition_page status=SUCCESS method=ManualAllocation_TestClass.Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:05:55 IST" name="setupTest" finished-at="2025-05-12T23:05:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Login_and_Navigation_to_Manual_Allocation_Core_Application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:05:55 IST" name="Login_and_Navigation_to_Manual_Allocation_Core_Application" finished-at="2025-05-12T23:07:01 IST" duration-ms="66241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation_Core_Application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation_Core_Application status=SUCCESS method=ManualAllocation_TestClass.Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:01 IST" name="setupTest" finished-at="2025-05-12T23:07:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Mandatory_Field_Validation_for_Asset_Category_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:01 IST" name="Mandatory_Field_Validation_for_Asset_Category_" finished-at="2025-05-12T23:07:11 IST" duration-ms="9521" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:11 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category_ status=SUCCESS method=ManualAllocation_TestClass.Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:11 IST" name="setupTest" finished-at="2025-05-12T23:07:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Asset_Category_SMA_and_NPA_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:11 IST" name="Asset_Category_SMA_and_NPA_Selection_" finished-at="2025-05-12T23:07:20 IST" duration-ms="8944" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection_ status=SUCCESS method=ManualAllocation_TestClass.Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:20 IST" name="setupTest" finished-at="2025-05-12T23:07:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.SMA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection_()[pri:24, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:20 IST" name="SMA_Category_Dropdown_Selection_" finished-at="2025-05-12T23:07:24 IST" duration-ms="4236" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection_ status=SUCCESS method=ManualAllocation_TestClass.SMA_Category_Dropdown_Selection_()[pri:24, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:24 IST" name="setupTest" finished-at="2025-05-12T23:07:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.NPA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection_()[pri:25, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:24 IST" name="NPA_Category_Dropdown_Selection_" finished-at="2025-05-12T23:07:33 IST" duration-ms="8722" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection_ status=SUCCESS method=ManualAllocation_TestClass.NPA_Category_Dropdown_Selection_()[pri:25, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:33 IST" name="setupTest" finished-at="2025-05-12T23:07:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.OS_Balance_Field_Validation_(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation_(java.util.Map)[pri:26, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:33 IST" name="OS_Balance_Field_Validation_" data-provider="TestData" finished-at="2025-05-12T23:07:36 IST" duration-ms="3635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation_ status=SUCCESS method=ManualAllocation_TestClass.OS_Balance_Field_Validation_(java.util.Map)[pri:26, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:36 IST" name="setupTest" finished-at="2025-05-12T23:07:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.To_Field_Dropdown_Selection_(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection_(java.util.Map)[pri:27, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:36 IST" name="To_Field_Dropdown_Selection_" data-provider="TestData" finished-at="2025-05-12T23:07:40 IST" duration-ms="3453" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection_ status=SUCCESS method=ManualAllocation_TestClass.To_Field_Dropdown_Selection_(java.util.Map)[pri:27, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:40 IST" name="setupTest" finished-at="2025-05-12T23:07:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_with_Mandatory_Fields_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields_()[pri:28, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:40 IST" name="Search_with_Mandatory_Fields_" finished-at="2025-05-12T23:07:50 IST" duration-ms="9958" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields_ status=SUCCESS method=ManualAllocation_TestClass.Search_with_Mandatory_Fields_()[pri:28, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:50 IST" name="setupTest" finished-at="2025-05-12T23:07:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Allocate_to_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:29, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:50 IST" name="Allocate_to_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:07:53 IST" duration-ms="3321" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocate_to_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocate_to_Field_Dropdown_Selection status=SUCCESS method=ManualAllocation_TestClass.Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:29, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:53 IST" name="setupTest" finished-at="2025-05-12T23:07:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:30, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:53 IST" name="Select_Call_Centre_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:07:57 IST" duration-ms="3335" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Call_Centre_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:07:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Call_Centre_Field_Dropdown_Selection status=SUCCESS method=ManualAllocation_TestClass.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:30, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:57 IST" name="setupTest" finished-at="2025-05-12T23:07:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Assign_Button_Validation_Message() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Assign_Button_Validation_Message()[pri:31, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:07:57 IST" name="Assign_Button_Validation_Message" finished-at="2025-05-12T23:08:05 IST" duration-ms="7947" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Assign_Button_Validation_Message -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:08:05 IST" name="setupTest" finished-at="2025-05-12T23:08:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Successful_Login_and_Navigation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:08:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:08:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Assign_Button_Validation_Message status=SUCCESS method=ManualAllocation_TestClass.Assign_Button_Validation_Message()[pri:31, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Successful_Login_and_Navigation()[pri:32, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:08:05 IST" name="Successful_Login_and_Navigation" finished-at="2025-05-12T23:09:01 IST" duration-ms="56841" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Successful_Login_and_Navigation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Successful_Login_and_Navigation status=SUCCESS method=ManualAllocation_TestClass.Successful_Login_and_Navigation()[pri:32, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:01 IST" name="setupTest" finished-at="2025-05-12T23:09:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Verify_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Mandatory_Fields()[pri:33, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:01 IST" name="Verify_Mandatory_Fields" finished-at="2025-05-12T23:09:04 IST" duration-ms="3077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:04 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Mandatory_Fields status=SUCCESS method=ManualAllocation_TestClass.Verify_Mandatory_Fields()[pri:33, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:04 IST" name="setupTest" finished-at="2025-05-12T23:09:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Form_Submission_Without_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Form_Submission_Without_Mandatory_Fields()[pri:34, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:04 IST" name="Form_Submission_Without_Mandatory_Fields" finished-at="2025-05-12T23:09:14 IST" duration-ms="9130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Form_Submission_Without_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Form_Submission_Without_Mandatory_Fields status=SUCCESS method=ManualAllocation_TestClass.Form_Submission_Without_Mandatory_Fields()[pri:34, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:14 IST" name="setupTest" finished-at="2025-05-12T23:09:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Asset_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_Selection()[pri:35, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:14 IST" name="Asset_Category_Selection" finished-at="2025-05-12T23:09:19 IST" duration-ms="5127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_Selection status=SUCCESS method=ManualAllocation_TestClass.Asset_Category_Selection()[pri:35, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:19 IST" name="setupTest" finished-at="2025-05-12T23:09:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.SMA_Category_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Selection_()[pri:36, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:19 IST" name="SMA_Category_Selection_" finished-at="2025-05-12T23:09:22 IST" duration-ms="3411" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection_ status=SUCCESS method=ManualAllocation_TestClass.SMA_Category_Selection_()[pri:36, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="NPA_Category_Selection()[pri:37, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:22 IST" name="NPA_Category_Selection" finished-at="2025-05-12T23:09:26 IST" duration-ms="3425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:22 IST" name="setupTest" finished-at="2025-05-12T23:09:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.NPA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:26 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection status=SUCCESS method=ManualAllocation_TestClass.NPA_Category_Selection()[pri:37, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:26 IST" name="setupTest" finished-at="2025-05-12T23:09:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Allocation_Type_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection(java.util.Map)[pri:38, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:26 IST" name="Allocation_Type_Selection" data-provider="TestData" finished-at="2025-05-12T23:09:30 IST" duration-ms="4117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:30 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection status=SUCCESS method=ManualAllocation_TestClass.Allocation_Type_Selection(java.util.Map)[pri:38, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:30 IST" name="setupTest" finished-at="2025-05-12T23:09:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Allocated_To_Selection_Call_Centre(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_Selection_Call_Centre(java.util.Map)[pri:39, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:30 IST" name="Allocated_To_Selection_Call_Centre" data-provider="TestData" finished-at="2025-05-12T23:09:33 IST" duration-ms="3599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_Selection_Call_Centre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_Selection_Call_Centre status=SUCCESS method=ManualAllocation_TestClass.Allocated_To_Selection_Call_Centre(java.util.Map)[pri:39, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:33 IST" name="setupTest" finished-at="2025-05-12T23:09:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_Functionality_with_Filters() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Functionality_with_Filters()[pri:40, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:33 IST" name="Search_Functionality_with_Filters" finished-at="2025-05-12T23:09:38 IST" duration-ms="4944" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Functionality_with_Filters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:38 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Functionality_with_Filters status=SUCCESS method=ManualAllocation_TestClass.Search_Functionality_with_Filters()[pri:40, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:38 IST" name="setupTest" finished-at="2025-05-12T23:09:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Download_File__List_of_Accounts(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_File__List_of_Accounts(java.util.Map)[pri:41, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:38 IST" name="Download_File__List_of_Accounts" data-provider="TestData" finished-at="2025-05-12T23:09:46 IST" duration-ms="7393" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_File__List_of_Accounts -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:46 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_File__List_of_Accounts status=SUCCESS method=ManualAllocation_TestClass.Download_File__List_of_Accounts(java.util.Map)[pri:41, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:46 IST" name="setupTest" finished-at="2025-05-12T23:09:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Verify_Downloaded_File() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Downloaded_File()[pri:42, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:46 IST" name="Verify_Downloaded_File" finished-at="2025-05-12T23:09:50 IST" duration-ms="4421" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Downloaded_File status=SUCCESS method=ManualAllocation_TestClass.Verify_Downloaded_File()[pri:42, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page()[pri:43, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:50 IST" name="Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page" finished-at="2025-05-12T23:09:54 IST" duration-ms="4294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:50 IST" name="setupTest" finished-at="2025-05-12T23:09:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page status=SUCCESS method=ManualAllocation_TestClass.Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page()[pri:43, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page()[pri:44, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:54 IST" name="Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page" finished-at="2025-05-12T23:09:58 IST" duration-ms="3154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:54 IST" name="setupTest" finished-at="2025-05-12T23:09:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:09:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page status=SUCCESS method=ManualAllocation_TestClass.Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page()[pri:44, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:58 IST" name="setupTest" finished-at="2025-05-12T23:09:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Account_Number_Field_ECP_Validations(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_ECP_Validations(java.util.Map)[pri:45, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:09:58 IST" name="Account_Number_Field_ECP_Validations" data-provider="TestData" finished-at="2025-05-12T23:10:01 IST" duration-ms="3342" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_ECP_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_ECP_Validations status=SUCCESS method=ManualAllocation_TestClass.Account_Number_Field_ECP_Validations(java.util.Map)[pri:45, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:01 IST" name="setupTest" finished-at="2025-05-12T23:10:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_with_Invalid_Account_Number() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Invalid_Account_Number()[pri:46, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:01 IST" name="Search_with_Invalid_Account_Number" finished-at="2025-05-12T23:10:10 IST" duration-ms="9376" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Invalid_Account_Number -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Invalid_Account_Number status=SUCCESS method=ManualAllocation_TestClass.Search_with_Invalid_Account_Number()[pri:46, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_with_Valid_Account_Number()[pri:47, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:10 IST" name="Search_with_Valid_Account_Number" finished-at="2025-05-12T23:10:22 IST" duration-ms="11274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Valid_Account_Number -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:10 IST" name="setupTest" finished-at="2025-05-12T23:10:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_with_Valid_Account_Number() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Valid_Account_Number status=SUCCESS method=ManualAllocation_TestClass.Search_with_Valid_Account_Number()[pri:47, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:22 IST" name="setupTest" finished-at="2025-05-12T23:10:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Verify_Fields_in_Add_Interaction_Details_Section() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_in_Add_Interaction_Details_Section()[pri:48, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:22 IST" name="Verify_Fields_in_Add_Interaction_Details_Section" finished-at="2025-05-12T23:10:25 IST" duration-ms="3321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_in_Add_Interaction_Details_Section -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_in_Add_Interaction_Details_Section status=SUCCESS method=ManualAllocation_TestClass.Verify_Fields_in_Add_Interaction_Details_Section()[pri:48, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:25 IST" name="setupTest" finished-at="2025-05-12T23:10:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map)[pri:49, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:25 IST" name="Select_Internal_User_from_Action_Owner_Dropdown" data-provider="TestData" finished-at="2025-05-12T23:10:28 IST" duration-ms="3287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Internal_User_from_Action_Owner_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Internal_User_from_Action_Owner_Dropdown status=SUCCESS method=ManualAllocation_TestClass.Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map)[pri:49, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:28 IST" name="setupTest" finished-at="2025-05-12T23:10:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_Disposition_Type(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Disposition_Type(java.util.Map)[pri:50, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:28 IST" name="Select_Disposition_Type" data-provider="TestData" finished-at="2025-05-12T23:10:32 IST" duration-ms="3982" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Disposition_Type -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Disposition_Type status=SUCCESS method=ManualAllocation_TestClass.Select_Disposition_Type(java.util.Map)[pri:50, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:32 IST" name="setupTest" finished-at="2025-05-12T23:10:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Sub_Disposition(java.util.Map)[pri:51, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:32 IST" name="Select_Sub_Disposition" data-provider="TestData" finished-at="2025-05-12T23:10:36 IST" duration-ms="3261" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Sub_Disposition status=SUCCESS method=ManualAllocation_TestClass.Select_Sub_Disposition(java.util.Map)[pri:51, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:36 IST" name="setupTest" finished-at="2025-05-12T23:10:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Select_Date_in_Next_Action_Date_DatePicker(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Date_in_Next_Action_Date_DatePicker(java.util.Map)[pri:52, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:36 IST" name="Select_Date_in_Next_Action_Date_DatePicker" data-provider="TestData" finished-at="2025-05-12T23:10:39 IST" duration-ms="3282" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Date_in_Next_Action_Date_DatePicker -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Date_in_Next_Action_Date_DatePicker status=SUCCESS method=ManualAllocation_TestClass.Select_Date_in_Next_Action_Date_DatePicker(java.util.Map)[pri:52, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Enter_Remarks_and_Save_Interaction(java.util.Map)[pri:53, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:39 IST" name="Enter_Remarks_and_Save_Interaction" data-provider="TestData" finished-at="2025-05-12T23:10:48 IST" duration-ms="9119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=12, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Core_Manual_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Remarks_and_Save_Interaction -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:39 IST" name="setupTest" finished-at="2025-05-12T23:10:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Enter_Remarks_and_Save_Interaction(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Remarks_and_Save_Interaction status=SUCCESS method=ManualAllocation_TestClass.Enter_Remarks_and_Save_Interaction(java.util.Map)[pri:53, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:48 IST" name="setupTest" finished-at="2025-05-12T23:10:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.ManualAllocation_TestClass.Search_for_Previously_Saved_Account_Interaction_Details() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_for_Previously_Saved_Account_Interaction_Details()[pri:54, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:48 IST" name="Search_for_Previously_Saved_Account_Interaction_Details" finished-at="2025-05-12T23:10:59 IST" duration-ms="10381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_for_Previously_Saved_Account_Interaction_Details -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:10:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_for_Previously_Saved_Account_Interaction_Details status=SUCCESS method=ManualAllocation_TestClass.Search_for_Previously_Saved_Account_Interaction_Details()[pri:54, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.CallCentre.ManualAllocation_TestClass@61d6015a]" started-at="2025-05-12T23:10:59 IST" name="afterEachTest" finished-at="2025-05-12T23:11:05 IST" duration-ms="6264" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.CallCentre.ManualAllocation_TestClass -->
      <class name="Core.CallCentre.RegularizationSummary_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:11:05 IST" name="SetUp" finished-at="2025-05-12T23:12:05 IST" duration-ms="60466" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:05 IST" name="setupTest" finished-at="2025-05-12T23:12:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Login_and_Navigation_to_Manual_Allocation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation()[pri:1, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:05 IST" name="Login_and_Navigation_to_Manual_Allocation" finished-at="2025-05-12T23:12:10 IST" duration-ms="5200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation status=SUCCESS method=RegularizationSummary_TestClass.Login_and_Navigation_to_Manual_Allocation()[pri:1, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:10 IST" name="setupTest" finished-at="2025-05-12T23:12:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Asset_Category_SMA_and_NPA_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection()[pri:2, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:10 IST" name="Asset_Category_SMA_and_NPA_Selection" finished-at="2025-05-12T23:12:19 IST" duration-ms="8951" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection status=SUCCESS method=RegularizationSummary_TestClass.Asset_Category_SMA_and_NPA_Selection()[pri:2, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:19 IST" name="setupTest" finished-at="2025-05-12T23:12:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.SMA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection()[pri:3, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:19 IST" name="SMA_Category_Dropdown_Selection" finished-at="2025-05-12T23:12:24 IST" duration-ms="4245" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection status=SUCCESS method=RegularizationSummary_TestClass.SMA_Category_Dropdown_Selection()[pri:3, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:24 IST" name="setupTest" finished-at="2025-05-12T23:12:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.NPA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection()[pri:4, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:24 IST" name="NPA_Category_Dropdown_Selection" finished-at="2025-05-12T23:12:27 IST" duration-ms="3241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection status=SUCCESS method=RegularizationSummary_TestClass.NPA_Category_Dropdown_Selection()[pri:4, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:27 IST" name="setupTest" finished-at="2025-05-12T23:12:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.OS_Balance_Field_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation(java.util.Map)[pri:5, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:27 IST" name="OS_Balance_Field_Validation" data-provider="TestData" finished-at="2025-05-12T23:12:31 IST" duration-ms="3670" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation status=SUCCESS method=RegularizationSummary_TestClass.OS_Balance_Field_Validation(java.util.Map)[pri:5, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:31 IST" name="setupTest" finished-at="2025-05-12T23:12:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.To_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection(java.util.Map)[pri:6, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:31 IST" name="To_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:12:34 IST" duration-ms="3450" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection status=SUCCESS method=RegularizationSummary_TestClass.To_Field_Dropdown_Selection(java.util.Map)[pri:6, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:34 IST" name="setupTest" finished-at="2025-05-12T23:12:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Search_with_Mandatory_Fields() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields()[pri:7, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:34 IST" name="Search_with_Mandatory_Fields" finished-at="2025-05-12T23:12:46 IST" duration-ms="12391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:46 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields status=SUCCESS method=RegularizationSummary_TestClass.Search_with_Mandatory_Fields()[pri:7, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:47 IST" name="setupTest" finished-at="2025-05-12T23:12:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Allocate_to_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:8, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:47 IST" name="Allocate_to_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:12:50 IST" duration-ms="3308" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocate_to_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocate_to_Field_Dropdown_Selection status=SUCCESS method=RegularizationSummary_TestClass.Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:8, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:50 IST" name="setupTest" finished-at="2025-05-12T23:12:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:9, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:50 IST" name="Select_Call_Centre_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-12T23:12:53 IST" duration-ms="3330" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Call_Centre_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:12:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Call_Centre_Field_Dropdown_Selection status=SUCCESS method=RegularizationSummary_TestClass.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:9, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:53 IST" name="setupTest" finished-at="2025-05-12T23:12:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Assign_Button_Validation_Message() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Assign_Button_Validation_Message()[pri:10, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:12:53 IST" name="Assign_Button_Validation_Message" finished-at="2025-05-12T23:13:09 IST" duration-ms="16071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Assign_Button_Validation_Message -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Assign_Button_Validation_Message status=SUCCESS method=RegularizationSummary_TestClass.Assign_Button_Validation_Message()[pri:10, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:09 IST" name="setupTest" finished-at="2025-05-12T23:13:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Create_entry_in_table_database() throws java.sql.SQLException,java.lang.ClassNotFoundException,java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Create_entry_in_table_database()[pri:11, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:09 IST" name="Create_entry_in_table_database" finished-at="2025-05-12T23:13:28 IST" duration-ms="18498" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Create_entry_in_table_database -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Create_entry_in_table_database status=SUCCESS method=RegularizationSummary_TestClass.Create_entry_in_table_database()[pri:11, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:28 IST" name="setupTest" finished-at="2025-05-12T23:13:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Side_Menu_Call_Centre_Listing() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Side_Menu_Call_Centre_Listing()[pri:12, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:28 IST" name="Side_Menu_Call_Centre_Listing" finished-at="2025-05-12T23:13:33 IST" duration-ms="5363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Side_Menu_Call_Centre_Listing -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Side_Menu_Call_Centre_Listing status=SUCCESS method=RegularizationSummary_TestClass.Side_Menu_Call_Centre_Listing()[pri:12, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:33 IST" name="setupTest" finished-at="2025-05-12T23:13:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Sub_Menu_Regularization_Summary_Listing() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Sub_Menu_Regularization_Summary_Listing()[pri:13, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:33 IST" name="Sub_Menu_Regularization_Summary_Listing" finished-at="2025-05-12T23:13:36 IST" duration-ms="3118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sub_Menu_Regularization_Summary_Listing -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Sub_Menu_Regularization_Summary_Listing status=SUCCESS method=RegularizationSummary_TestClass.Sub_Menu_Regularization_Summary_Listing()[pri:13, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:36 IST" name="setupTest" finished-at="2025-05-12T23:13:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Click_Regularization_Summary_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Click_Regularization_Summary_()[pri:14, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:36 IST" name="Click_Regularization_Summary_" finished-at="2025-05-12T23:13:40 IST" duration-ms="3760" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Regularization_Summary_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Regularization_Summary_ status=SUCCESS method=RegularizationSummary_TestClass.Click_Regularization_Summary_()[pri:14, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Regularization_Summary_Page_Dropdown_and_Search()[pri:15, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:40 IST" name="Regularization_Summary_Page_Dropdown_and_Search" finished-at="2025-05-12T23:13:43 IST" duration-ms="3054" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Regularization_Summary_Page_Dropdown_and_Search -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:40 IST" name="setupTest" finished-at="2025-05-12T23:13:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Regularization_Summary_Page_Dropdown_and_Search() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:43 IST" name="setupTest" finished-at="2025-05-12T23:13:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Click_Search_Without_Selecting_Dropdown() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Regularization_Summary_Page_Dropdown_and_Search status=SUCCESS method=RegularizationSummary_TestClass.Regularization_Summary_Page_Dropdown_and_Search()[pri:15, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Click_Search_Without_Selecting_Dropdown()[pri:16, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:43 IST" name="Click_Search_Without_Selecting_Dropdown" finished-at="2025-05-12T23:13:51 IST" duration-ms="8386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Search_Without_Selecting_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Search_Without_Selecting_Dropdown status=SUCCESS method=RegularizationSummary_TestClass.Click_Search_Without_Selecting_Dropdown()[pri:16, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Dropdown_Callcentre_Name(java.util.Map)[pri:17, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:51 IST" name="Dropdown_Callcentre_Name" data-provider="TestData" finished-at="2025-05-12T23:13:55 IST" duration-ms="3224" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dropdown_Callcentre_Name -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:51 IST" name="setupTest" finished-at="2025-05-12T23:13:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Dropdown_Callcentre_Name(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Dropdown_Callcentre_Name status=SUCCESS method=RegularizationSummary_TestClass.Dropdown_Callcentre_Name(java.util.Map)[pri:17, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_Regularization_Summary()[pri:18, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:55 IST" name="Search_Regularization_Summary" finished-at="2025-05-12T23:13:58 IST" duration-ms="3736" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Regularization_Summary -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:55 IST" name="setupTest" finished-at="2025-05-12T23:13:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Search_Regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:13:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Regularization_Summary status=SUCCESS method=RegularizationSummary_TestClass.Search_Regularization_Summary()[pri:18, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:58 IST" name="setupTest" finished-at="2025-05-12T23:13:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Download_the_regularization_summary_report() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_the_regularization_summary_report()[pri:19, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:13:58 IST" name="Download_the_regularization_summary_report" finished-at="2025-05-12T23:14:02 IST" duration-ms="3719" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_the_regularization_summary_report -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:02 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:14:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_the_regularization_summary_report status=SUCCESS method=RegularizationSummary_TestClass.Download_the_regularization_summary_report()[pri:19, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Data_Verification_in_Downloaded_File_()[pri:20, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:02 IST" name="Data_Verification_in_Downloaded_File_" finished-at="2025-05-12T23:14:08 IST" duration-ms="5332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Data_Verification_in_Downloaded_File_ -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:02 IST" name="setupTest" finished-at="2025-05-12T23:14:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Data_Verification_in_Downloaded_File_() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:08 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:14:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Data_Verification_in_Downloaded_File_ status=SUCCESS method=RegularizationSummary_TestClass.Data_Verification_in_Downloaded_File_()[pri:20, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:08 IST" name="setupTest" finished-at="2025-05-12T23:14:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Download_the_regularization_summary_report_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_the_regularization_summary_report_()[pri:21, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:08 IST" name="Download_the_regularization_summary_report_" finished-at="2025-05-12T23:14:13 IST" duration-ms="5806" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_the_regularization_summary_report_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:14:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_the_regularization_summary_report_ status=SUCCESS method=RegularizationSummary_TestClass.Download_the_regularization_summary_report_()[pri:21, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Validate_Downloaded_File_()[pri:22, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:13 IST" name="Validate_Downloaded_File_" finished-at="2025-05-12T23:14:16 IST" duration-ms="3087" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Downloaded_File_ -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:13 IST" name="setupTest" finished-at="2025-05-12T23:14:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Validate_Downloaded_File_() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:16 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:14:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Downloaded_File_ status=SUCCESS method=RegularizationSummary_TestClass.Validate_Downloaded_File_()[pri:22, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:16 IST" name="setupTest" finished-at="2025-05-12T23:14:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Login_to_call_centre_application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application()[pri:23, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:14:16 IST" name="Login_to_call_centre_application" finished-at="2025-05-12T23:15:13 IST" duration-ms="56934" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:15:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application status=SUCCESS method=RegularizationSummary_TestClass.Login_to_call_centre_application()[pri:23, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Click_Regularization_Summary()[pri:24, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:13 IST" name="Click_Regularization_Summary" finished-at="2025-05-12T23:15:22 IST" duration-ms="8949" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Regularization_Summary -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:13 IST" name="setupTest" finished-at="2025-05-12T23:15:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Click_Regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:15:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Regularization_Summary status=SUCCESS method=RegularizationSummary_TestClass.Click_Regularization_Summary()[pri:24, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:22 IST" name="setupTest" finished-at="2025-05-12T23:15:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Data_Verification_in_Downloaded_File() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Data_Verification_in_Downloaded_File()[pri:25, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:22 IST" name="Data_Verification_in_Downloaded_File" finished-at="2025-05-12T23:15:28 IST" duration-ms="5329" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Data_Verification_in_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:15:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Data_Verification_in_Downloaded_File status=SUCCESS method=RegularizationSummary_TestClass.Data_Verification_in_Downloaded_File()[pri:25, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Download_regularization_Summary()[pri:26, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:28 IST" name="Download_regularization_Summary" finished-at="2025-05-12T23:15:33 IST" duration-ms="5294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_regularization_Summary -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:28 IST" name="setupTest" finished-at="2025-05-12T23:15:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Download_regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:15:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_regularization_Summary status=SUCCESS method=RegularizationSummary_TestClass.Download_regularization_Summary()[pri:26, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:33 IST" name="setupTest" finished-at="2025-05-12T23:15:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CallCentre.RegularizationSummary_TestClass.Validate_Downloaded_File() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Downloaded_File()[pri:27, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:33 IST" name="Validate_Downloaded_File" finished-at="2025-05-12T23:15:36 IST" duration-ms="3077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:15:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Downloaded_File status=SUCCESS method=RegularizationSummary_TestClass.Validate_Downloaded_File()[pri:27, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.CallCentre.RegularizationSummary_TestClass@2525ff7e]" started-at="2025-05-12T23:15:36 IST" name="afterEachTest" finished-at="2025-05-12T23:15:38 IST" duration-ms="2395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.CallCentre.RegularizationSummary_TestClass -->
    </test> <!-- Core - Call centre -->
    <test started-at="2025-05-12T23:15:38 IST" name="Core - Configurations" finished-at="2025-05-12T23:51:25 IST" duration-ms="2146655">
      <class name="Core.Configurations.CollectionOfficerConfig_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:15:38 IST" name="SetUp" finished-at="2025-05-12T23:16:39 IST" duration-ms="60641" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:39 IST" name="setupTest" finished-at="2025-05-12T23:16:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Add_core_users_to_mst_employee_table() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_core_users_to_mst_employee_table()[pri:1, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:39 IST" name="Add_core_users_to_mst_employee_table" finished-at="2025-05-12T23:16:43 IST" duration-ms="3760" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_core_users_to_mst_employee_table -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:16:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_core_users_to_mst_employee_table status=SUCCESS method=CollectionOfficerConfig_TestClass.Add_core_users_to_mst_employee_table()[pri:1, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:43 IST" name="setupTest" finished-at="2025-05-12T23:16:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Collection_Officer_Configurations_Page_Basic_Accessibility() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Collection_Officer_Configurations_Page_Basic_Accessibility()[pri:2, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:43 IST" name="Test_Collection_Officer_Configurations_Page_Basic_Accessibility" finished-at="2025-05-12T23:16:49 IST" duration-ms="5841" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Collection_Officer_Configurations_Page_Basic_Accessibility -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:16:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Collection_Officer_Configurations_Page_Basic_Accessibility status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Collection_Officer_Configurations_Page_Basic_Accessibility()[pri:2, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:49 IST" name="setupTest" finished-at="2025-05-12T23:16:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Collection_Officer_Configurations_Page_Parameters() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Collection_Officer_Configurations_Page_Parameters()[pri:3, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:49 IST" name="Test_Collection_Officer_Configurations_Page_Parameters" finished-at="2025-05-12T23:16:54 IST" duration-ms="5404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Collection_Officer_Configurations_Page_Parameters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:16:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Collection_Officer_Configurations_Page_Parameters status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Collection_Officer_Configurations_Page_Parameters()[pri:3, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:54 IST" name="setupTest" finished-at="2025-05-12T23:16:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Search_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Search_Functionality()[pri:4, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:16:54 IST" name="Test_Search_Functionality" finished-at="2025-05-12T23:17:17 IST" duration-ms="23403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Search_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:17:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Search_Functionality status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Search_Functionality()[pri:4, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:17 IST" name="setupTest" finished-at="2025-05-12T23:17:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Save_Configurations_Functionality() throws java.lang.ClassNotFoundException,java.sql.SQLException,java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Save_Configurations_Functionality()[pri:5, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:17 IST" name="Test_Save_Configurations_Functionality" finished-at="2025-05-12T23:17:29 IST" duration-ms="11519" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Save_Configurations_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:17:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Save_Configurations_Functionality status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Save_Configurations_Functionality()[pri:5, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:29 IST" name="setupTest" finished-at="2025-05-12T23:17:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Excel_Download_Functionality() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Excel_Download_Functionality()[pri:6, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:29 IST" name="Test_Excel_Download_Functionality" finished-at="2025-05-12T23:17:43 IST" duration-ms="14092" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Excel_Download_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:17:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Excel_Download_Functionality status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Excel_Download_Functionality()[pri:6, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Test_Failed_Save_Configurations_without_Selections()[pri:7, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:43 IST" name="Test_Failed_Save_Configurations_without_Selections" finished-at="2025-05-12T23:17:46 IST" duration-ms="3160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Failed_Save_Configurations_without_Selections -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:43 IST" name="setupTest" finished-at="2025-05-12T23:17:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Failed_Save_Configurations_without_Selections() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:46 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:17:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Failed_Save_Configurations_without_Selections status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Failed_Save_Configurations_without_Selections()[pri:7, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:46 IST" name="setupTest" finished-at="2025-05-12T23:17:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Reset_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Reset_Functionality()[pri:8, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:46 IST" name="Test_Reset_Functionality" finished-at="2025-05-12T23:17:56 IST" duration-ms="9257" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Reset_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:17:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Reset_Functionality status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Reset_Functionality()[pri:8, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:56 IST" name="setupTest" finished-at="2025-05-12T23:17:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Verify_My_Desk_Unassigned_accounts_Tile() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_My_Desk_Unassigned_accounts_Tile()[pri:9, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:17:56 IST" name="Verify_My_Desk_Unassigned_accounts_Tile" finished-at="2025-05-12T23:18:31 IST" duration-ms="35426" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_My_Desk_Unassigned_accounts_Tile -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:18:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_My_Desk_Unassigned_accounts_Tile status=SUCCESS method=CollectionOfficerConfig_TestClass.Verify_My_Desk_Unassigned_accounts_Tile()[pri:9, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:31 IST" name="setupTest" finished-at="2025-05-12T23:18:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Verify_My_Desk_Branch_Attention_Required_Tile() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_My_Desk_Branch_Attention_Required_Tile()[pri:10, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:31 IST" name="Verify_My_Desk_Branch_Attention_Required_Tile" finished-at="2025-05-12T23:18:47 IST" duration-ms="16273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_My_Desk_Branch_Attention_Required_Tile -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:18:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_My_Desk_Branch_Attention_Required_Tile status=SUCCESS method=CollectionOfficerConfig_TestClass.Verify_My_Desk_Branch_Attention_Required_Tile()[pri:10, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:47 IST" name="setupTest" finished-at="2025-05-12T23:18:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile() throws java.lang.ClassNotFoundException,java.io.IOException,java.lang.InterruptedException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile()[pri:11, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:18:47 IST" name="other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile" finished-at="2025-05-12T23:20:15 IST" duration-ms="87785" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:15 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:20:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile status=SUCCESS method=CollectionOfficerConfig_TestClass.other_branch_user_is_not_showing_My_Desk_Unassigned_accounts_Tile()[pri:11, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:15 IST" name="setupTest" finished-at="2025-05-12T23:20:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile()[pri:12, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:15 IST" name="other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile" finished-at="2025-05-12T23:20:32 IST" duration-ms="16816" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:20:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile status=SUCCESS method=CollectionOfficerConfig_TestClass.other_branch_user_is_not_showing_My_Desk_Branch_Attention_Required_Tile()[pri:12, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Test_Uncheck_Collection_Officer_Functionality()[pri:13, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:32 IST" name="Test_Uncheck_Collection_Officer_Functionality" finished-at="2025-05-12T23:22:13 IST" duration-ms="101149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Uncheck_Collection_Officer_Functionality -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:20:32 IST" name="setupTest" finished-at="2025-05-12T23:20:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.CollectionOfficerConfig_TestClass.Test_Uncheck_Collection_Officer_Functionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:22:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:22:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Uncheck_Collection_Officer_Functionality status=SUCCESS method=CollectionOfficerConfig_TestClass.Test_Uncheck_Collection_Officer_Functionality()[pri:13, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.Configurations.CollectionOfficerConfig_TestClass@34f7cfd9]" started-at="2025-05-12T23:22:13 IST" name="afterEachTest" finished-at="2025-05-12T23:22:16 IST" duration-ms="3356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.Configurations.CollectionOfficerConfig_TestClass -->
      <class name="Core.Configurations.LoginBannerConfiguration_TestClass">
        <test-method is-config="true" signature="reference()[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:22:16 IST" name="reference" finished-at="2025-05-12T23:23:16 IST" duration-ms="60025" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reference -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:16 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:17 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfigurationPage() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NavigationToLoginBannerConfigurationPage()[pri:1, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:17 IST" name="NavigationToLoginBannerConfigurationPage" finished-at="2025-05-12T23:23:25 IST" duration-ms="8400" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigationToLoginBannerConfigurationPage -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:25 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:26 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyFieldsandButtonsonManualAllocationPage() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NavigationToLoginBannerConfigurationPage status=SUCCESS method=LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfigurationPage()[pri:1, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="VerifyFieldsandButtonsonManualAllocationPage()[pri:2, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:26 IST" name="VerifyFieldsandButtonsonManualAllocationPage" finished-at="2025-05-12T23:23:31 IST" duration-ms="5391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyFieldsandButtonsonManualAllocationPage -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyFieldsandButtonsonManualAllocationPage status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyFieldsandButtonsonManualAllocationPage()[pri:2, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:31 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:32 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection()[pri:3, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:32 IST" name="MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection" finished-at="2025-05-12T23:23:35 IST" duration-ms="3149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection status=SUCCESS method=LoginBannerConfiguration_TestClass.MandatoryFieldsWarning_SubmitWithoutUserType_SubmitWithoutBannerType_SubmitWithoutSection()[pri:3, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:35 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:35 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectUserType() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectUserType()[pri:4, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:35 IST" name="SelectUserType" finished-at="2025-05-12T23:23:39 IST" duration-ms="3244" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectUserType -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectUserType status=SUCCESS method=LoginBannerConfiguration_TestClass.SelectUserType()[pri:4, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:39 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:39 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectBannerType() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectBannerType()[pri:5, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:39 IST" name="SelectBannerType" finished-at="2025-05-12T23:23:43 IST" duration-ms="4279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectBannerType -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectBannerType status=SUCCESS method=LoginBannerConfiguration_TestClass.SelectBannerType()[pri:5, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:43 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:44 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectSection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectSection()[pri:6, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:44 IST" name="SelectSection" finished-at="2025-05-12T23:23:48 IST" duration-ms="4231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectSection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectSection status=SUCCESS method=LoginBannerConfiguration_TestClass.SelectSection()[pri:6, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:48 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:49 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.EnterHeading(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="EnterHeading(java.util.Map)[pri:7, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="EnterHeading" data-provider="TestData" finished-at="2025-05-12T23:23:49 IST" duration-ms="118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnterHeading -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnterHeading status=SUCCESS method=LoginBannerConfiguration_TestClass.EnterHeading(java.util.Map)[pri:7, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:49 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.EnterDetails(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="EnterDetails(java.util.Map)[pri:8, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="EnterDetails" data-provider="TestData" finished-at="2025-05-12T23:23:49 IST" duration-ms="112" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnterDetails -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnterDetails status=SUCCESS method=LoginBannerConfiguration_TestClass.EnterDetails(java.util.Map)[pri:8, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:49 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:50 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SubmitData() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SubmitData()[pri:9, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:50 IST" name="SubmitData" finished-at="2025-05-12T23:23:57 IST" duration-ms="7143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubmitData -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:23:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubmitData status=SUCCESS method=LoginBannerConfiguration_TestClass.SubmitData()[pri:9, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:57 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:23:58 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyDataPostLogout() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyDataPostLogout()[pri:10, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:23:58 IST" name="VerifyDataPostLogout" finished-at="2025-05-12T23:24:08 IST" duration-ms="10317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDataPostLogout -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:08 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyDataPostLogout status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyDataPostLogout()[pri:10, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:08 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:08 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfiguration_SelectUserType() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NavigationToLoginBannerConfiguration_SelectUserType()[pri:11, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:08 IST" name="NavigationToLoginBannerConfiguration_SelectUserType" finished-at="2025-05-12T23:24:38 IST" duration-ms="29211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigationToLoginBannerConfiguration_SelectUserType -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:38 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NavigationToLoginBannerConfiguration_SelectUserType status=SUCCESS method=LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfiguration_SelectUserType()[pri:11, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:38 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:38 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectHyperlinkfromBannerType() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectHyperlinkfromBannerType()[pri:12, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:38 IST" name="SelectHyperlinkfromBannerType" finished-at="2025-05-12T23:24:45 IST" duration-ms="7225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectHyperlinkfromBannerType -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectHyperlinkfromBannerType status=SUCCESS method=LoginBannerConfiguration_TestClass.SelectHyperlinkfromBannerType()[pri:12, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:45 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:46 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectLlink1fromSection() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectLlink1fromSection()[pri:13, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:46 IST" name="SelectLlink1fromSection" finished-at="2025-05-12T23:24:55 IST" duration-ms="9275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectLlink1fromSection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectLlink1fromSection status=SUCCESS method=LoginBannerConfiguration_TestClass.SelectLlink1fromSection()[pri:13, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:55 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:56 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.EnterHeading1(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="EnterHeading1(java.util.Map)[pri:14, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="EnterHeading1" data-provider="TestData" finished-at="2025-05-12T23:24:56 IST" duration-ms="109" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnterHeading1 -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnterHeading1 status=SUCCESS method=LoginBannerConfiguration_TestClass.EnterHeading1(java.util.Map)[pri:14, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:56 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.EnterDetails1(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="EnterDetails1(java.util.Map)[pri:15, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="EnterDetails1" data-provider="TestData" finished-at="2025-05-12T23:24:56 IST" duration-ms="107" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnterDetails1 -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:24:57 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SubmitData_VerifyDataPostLogoutForhyperlink() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:24:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnterDetails1 status=SUCCESS method=LoginBannerConfiguration_TestClass.EnterDetails1(java.util.Map)[pri:15, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="SubmitData_VerifyDataPostLogoutForhyperlink()[pri:16, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:24:57 IST" name="SubmitData_VerifyDataPostLogoutForhyperlink" finished-at="2025-05-12T23:25:10 IST" duration-ms="13652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubmitData_VerifyDataPostLogoutForhyperlink -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:25:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubmitData_VerifyDataPostLogoutForhyperlink status=SUCCESS method=LoginBannerConfiguration_TestClass.SubmitData_VerifyDataPostLogoutForhyperlink()[pri:16, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:10 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:25:11 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SearchExistingConfigurations1() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SearchExistingConfigurations1()[pri:17, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:11 IST" name="SearchExistingConfigurations1" finished-at="2025-05-12T23:25:48 IST" duration-ms="37279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchExistingConfigurations1 -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:25:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchExistingConfigurations1 status=SUCCESS method=LoginBannerConfiguration_TestClass.SearchExistingConfigurations1()[pri:17, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:48 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:25:49 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SearchExistingConfigurations2() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SearchExistingConfigurations2()[pri:18, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:25:49 IST" name="SearchExistingConfigurations2" finished-at="2025-05-12T23:26:14 IST" duration-ms="25130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchExistingConfigurations2 -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:26:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchExistingConfigurations2 status=SUCCESS method=LoginBannerConfiguration_TestClass.SearchExistingConfigurations2()[pri:18, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:14 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:26:14 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.EditandUpdateData(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="EditandUpdateData(java.util.Map)[pri:19, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:14 IST" name="EditandUpdateData" data-provider="TestData" finished-at="2025-05-12T23:26:46 IST" duration-ms="31903" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditandUpdateData -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:46 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:26:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EditandUpdateData status=SUCCESS method=LoginBannerConfiguration_TestClass.EditandUpdateData(java.util.Map)[pri:19, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:46 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:26:47 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyUpdatedDataPostLogout(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyUpdatedDataPostLogout(java.util.Map)[pri:20, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:47 IST" name="VerifyUpdatedDataPostLogout" data-provider="TestData" finished-at="2025-05-12T23:26:55 IST" duration-ms="8426" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyUpdatedDataPostLogout -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:26:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyUpdatedDataPostLogout status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyUpdatedDataPostLogout(java.util.Map)[pri:20, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:55 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:26:56 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SubmitWithoutHeading(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SubmitWithoutHeading(java.util.Map)[pri:21, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:26:56 IST" name="SubmitWithoutHeading" data-provider="TestData" finished-at="2025-05-12T23:47:34 IST" duration-ms="1238102" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for element to be clickable: By.xpath: //span[text()='Configurations'] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for element to be clickable: By.xpath: //span[text()='Configurations'] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at com.BasePackage.Base_Class.click(Base_Class.java:134)
at Core.Configurations.LoginBannerConfiguration_MainClass.clickOnConfigurationMenu(LoginBannerConfiguration_MainClass.java:32)
at Core.Configurations.LoginBannerConfiguration_TestClass.SubmitWithoutHeading(LoginBannerConfiguration_TestClass.java:914)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubmitWithoutHeading -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:47:34 IST" duration-ms="295" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubmitWithoutHeading status=FAILURE method=LoginBannerConfiguration_TestClass.SubmitWithoutHeading(java.util.Map)[pri:21, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:34 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:47:35 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SubmitWithoutDetails(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SubmitWithoutDetails(java.util.Map)[pri:22, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:35 IST" name="SubmitWithoutDetails" data-provider="TestData" finished-at="2025-05-12T23:47:35 IST" duration-ms="19" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//textarea[@name='Heading']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//textarea[@name='Heading']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//textarea[@name='Heading']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//textarea[@name='Heading']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at Core.Configurations.LoginBannerConfiguration_MainClass.headerlink(LoginBannerConfiguration_MainClass.java:246)
at Core.Configurations.LoginBannerConfiguration_TestClass.SubmitWithoutDetails(LoginBannerConfiguration_TestClass.java:1005)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubmitWithoutDetails -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:47:35 IST" duration-ms="263" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SubmitWithoutDetails status=FAILURE method=LoginBannerConfiguration_TestClass.SubmitWithoutDetails(java.util.Map)[pri:22, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:35 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:47:36 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectUserType1() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectUserType1()[pri:23, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:36 IST" name="SelectUserType1" finished-at="2025-05-12T23:47:36 IST" duration-ms="17" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//button[text()='Reset']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//button[text()='Reset']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//button[text()='Reset']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//button[text()='Reset']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at Core.Configurations.LoginBannerConfiguration_MainClass.clickResetbutton(LoginBannerConfiguration_MainClass.java:179)
at Core.Configurations.LoginBannerConfiguration_TestClass.SelectUserType1(LoginBannerConfiguration_TestClass.java:1044)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectUserType1 -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:47:36 IST" duration-ms="291" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectUserType1 status=FAILURE method=LoginBannerConfiguration_TestClass.SelectUserType1()[pri:23, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:36 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:47:36 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map)[pri:24, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:36 IST" name="SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre" data-provider="TestData" finished-at="2025-05-12T23:47:36 IST" duration-ms="19" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//label[text()='Banner Type']/following-sibling::div[@onmousedown='Radzen.activeElement = null']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//label[text()='Banner Type']/following-sibling::div[@onmousedown='Radzen.activeElement = null']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//label[text()='Banner Type']/following-sibling::div[@onmousedown='Radzen.activeElement = null']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//label[text()='Banner Type']/following-sibling::div[@onmousedown='Radzen.activeElement = null']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at Core.Configurations.LoginBannerConfiguration_MainClass.clickBannertypedropdown(LoginBannerConfiguration_MainClass.java:114)
at Core.Configurations.LoginBannerConfiguration_TestClass.SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(LoginBannerConfiguration_TestClass.java:1082)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:47:37 IST" duration-ms="259" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre status=FAILURE method=LoginBannerConfiguration_TestClass.SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map)[pri:24, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:37 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:47:37 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifydataPostLogoutForCallCentre(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifydataPostLogoutForCallCentre(java.util.Map)[pri:25, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:37 IST" name="VerifydataPostLogoutForCallCentre" data-provider="TestData" finished-at="2025-05-12T23:47:39 IST" duration-ms="2056" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//button[@class='btn dropdown-toggle']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//button[@class='btn dropdown-toggle']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//button[@class='btn dropdown-toggle']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d8ede9cc61dd624ee26ebbed4ed63fb2, findElement {using=xpath, value=//button[@class='btn dropdown-toggle']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60639/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8ede9cc61dd624ee26ebbed4ed63fb2
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at Core.Configurations.LoginBannerConfiguration_MainClass.Clickprofiledropdown(LoginBannerConfiguration_MainClass.java:200)
at Core.Configurations.LoginBannerConfiguration_TestClass.VerifydataPostLogoutForCallCentre(LoginBannerConfiguration_TestClass.java:1164)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifydataPostLogoutForCallCentre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:47:40 IST" duration-ms="261" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifydataPostLogoutForCallCentre status=FAILURE method=LoginBannerConfiguration_TestClass.VerifydataPostLogoutForCallCentre(java.util.Map)[pri:25, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:40 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:47:40 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map)[pri:26, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:47:40 IST" name="NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre" data-provider="TestData" finished-at="2025-05-12T23:48:25 IST" duration-ms="44865" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:48:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre status=SUCCESS method=LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForcallCentre(java.util.Map)[pri:26, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:25 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:48:25 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifydataPostLogoutForCallCentre2(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifydataPostLogoutForCallCentre2(java.util.Map)[pri:27, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:25 IST" name="VerifydataPostLogoutForCallCentre2" data-provider="TestData" finished-at="2025-05-12T23:48:34 IST" duration-ms="8532" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifydataPostLogoutForCallCentre2 -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:48:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifydataPostLogoutForCallCentre2 status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifydataPostLogoutForCallCentre2(java.util.Map)[pri:27, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:34 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:48:35 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.ModifyandUpdatedataforCallCentre(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="ModifyandUpdatedataforCallCentre(java.util.Map)[pri:28, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:48:35 IST" name="ModifyandUpdatedataforCallCentre" data-provider="TestData" finished-at="2025-05-12T23:49:20 IST" duration-ms="45255" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ModifyandUpdatedataforCallCentre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:49:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ModifyandUpdatedataforCallCentre status=SUCCESS method=LoginBannerConfiguration_TestClass.ModifyandUpdatedataforCallCentre(java.util.Map)[pri:28, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:20 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:49:20 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyModifieddataforCallCentre(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyModifieddataforCallCentre(java.util.Map)[pri:29, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:20 IST" name="VerifyModifieddataforCallCentre" data-provider="TestData" finished-at="2025-05-12T23:49:29 IST" duration-ms="8512" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyModifieddataforCallCentre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:49:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyModifieddataforCallCentre status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyModifieddataforCallCentre(java.util.Map)[pri:29, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:29 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:49:29 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser(java.util.Map)[pri:30, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:49:29 IST" name="NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser" data-provider="TestData" finished-at="2025-05-12T23:50:12 IST" duration-ms="42701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:12 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:50:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser status=SUCCESS method=LoginBannerConfiguration_TestClass.NavigationToLoginBannerConfig_SelectUserType_SelectBannerType_SelectSection_EnterHeading_EnterDetails_SubmitDataForAgencyUser(java.util.Map)[pri:30, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:12 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:50:13 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyPostLogoutdataAgencyUser(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyPostLogoutdataAgencyUser(java.util.Map)[pri:31, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:13 IST" name="VerifyPostLogoutdataAgencyUser" data-provider="TestData" finished-at="2025-05-12T23:50:20 IST" duration-ms="7392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyPostLogoutdataAgencyUser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:50:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyPostLogoutdataAgencyUser status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyPostLogoutdataAgencyUser(java.util.Map)[pri:31, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:20 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:50:21 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.SearchDataForAgencyUser() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SearchDataForAgencyUser()[pri:32, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:21 IST" name="SearchDataForAgencyUser" finished-at="2025-05-12T23:50:58 IST" duration-ms="37318" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchDataForAgencyUser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:50:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchDataForAgencyUser status=SUCCESS method=LoginBannerConfiguration_TestClass.SearchDataForAgencyUser()[pri:32, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:58 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:50:58 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.ModifydataforAgencyUser(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="ModifydataforAgencyUser(java.util.Map)[pri:33, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:50:58 IST" name="ModifydataforAgencyUser" data-provider="TestData" finished-at="2025-05-12T23:51:05 IST" duration-ms="6443" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ModifydataforAgencyUser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:51:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:51:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ModifydataforAgencyUser status=SUCCESS method=LoginBannerConfiguration_TestClass.ModifydataforAgencyUser(java.util.Map)[pri:33, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:51:05 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-12T23:51:05 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.Configurations.LoginBannerConfiguration_TestClass.VerifyModifiedDataforAgencyUser(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyModifiedDataforAgencyUser(java.util.Map)[pri:34, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:51:05 IST" name="VerifyModifiedDataforAgencyUser" data-provider="TestData" finished-at="2025-05-12T23:51:24 IST" duration-ms="18215" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AgencyUpdatedDetail1=https://www.grammarly.com/, AgencyUpdatedHeader1=Agency header_1, AgencyUserDetail1=AgencyDetails1, AgencyUserHeader1=AgencyHeader1, AlphaNumericInput=TestAutomation1001, CallCenterDetailLink1=https://www.zoho.com/calendar/personal-calendar.html, CallCenterDetailtext=CallCentre01, CallCenterHeaderLink1=Link_1, CallCenterHeadingtext=CallCentre01, CallCenterModifiedDetail=https://chatgpt.com/, CallCenterModifiedHeader=CallCentre, DetailField=Detail10, Detailfield1link=https://www.google.com/, Headerfield1link=Link_1, HeadingField=Header10, Modifiedlink1=https://www.grammarly.com/, Run=Yes, TestScenario=Login_banner_confi}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyModifiedDataforAgencyUser -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:51:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:51:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyModifiedDataforAgencyUser status=SUCCESS method=LoginBannerConfiguration_TestClass.VerifyModifiedDataforAgencyUser(java.util.Map)[pri:34, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="AfterClass()[pri:0, instance:Core.Configurations.LoginBannerConfiguration_TestClass@65f095f8]" started-at="2025-05-12T23:51:24 IST" name="AfterClass" finished-at="2025-05-12T23:51:25 IST" duration-ms="1504" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- Core.Configurations.LoginBannerConfiguration_TestClass -->
    </test> <!-- Core - Configurations -->
    <test started-at="2025-05-12T23:51:25 IST" name="Core - alerts and notifications" finished-at="2025-05-13T00:17:27 IST" duration-ms="1561851">
      <class name="Core.AlertsandNotifications.AlertsTemplateManagement_TestClass">
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:53:22 IST" name="setupTest" finished-at="2025-05-12T23:53:22 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Test_Login_with_Valid_Credentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:53:22 IST" name="SetUp" finished-at="2025-05-12T23:53:22 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method signature="Test_Login_with_Valid_Credentials()[pri:1, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:53:22 IST" name="Test_Login_with_Valid_Credentials" finished-at="2025-05-12T23:54:27 IST" duration-ms="64942" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_with_Valid_Credentials -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Login_with_Valid_Credentials status=SUCCESS method=AlertsTemplateManagement_TestClass.Test_Login_with_Valid_Credentials()[pri:1, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Display_Alerts_and_Notifications_Menu_Option()[pri:2, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:27 IST" name="Display_Alerts_and_Notifications_Menu_Option" finished-at="2025-05-12T23:54:35 IST" duration-ms="8053" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Display_Alerts_and_Notifications_Menu_Option -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:27 IST" name="setupTest" finished-at="2025-05-12T23:54:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Display_Alerts_and_Notifications_Menu_Option() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Display_Alerts_and_Notifications_Menu_Option status=SUCCESS method=AlertsTemplateManagement_TestClass.Display_Alerts_and_Notifications_Menu_Option()[pri:2, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Access_Alerts_and_Notifications_Page()[pri:3, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:35 IST" name="Access_Alerts_and_Notifications_Page" finished-at="2025-05-12T23:54:38 IST" duration-ms="3146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Access_Alerts_and_Notifications_Page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:35 IST" name="setupTest" finished-at="2025-05-12T23:54:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Access_Alerts_and_Notifications_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:38 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Access_Alerts_and_Notifications_Page status=SUCCESS method=AlertsTemplateManagement_TestClass.Access_Alerts_and_Notifications_Page()[pri:3, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Navigate_to_Template_Management()[pri:4, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:38 IST" name="Navigate_to_Template_Management" finished-at="2025-05-12T23:54:43 IST" duration-ms="5451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Navigate_to_Template_Management -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:38 IST" name="setupTest" finished-at="2025-05-12T23:54:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Navigate_to_Template_Management() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Navigate_to_Template_Management status=SUCCESS method=AlertsTemplateManagement_TestClass.Navigate_to_Template_Management()[pri:4, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:44 IST" name="setupTest" finished-at="2025-05-12T23:54:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Interact_with_Template_Management_Fields(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Interact_with_Template_Management_Fields(java.util.Map)[pri:5, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:44 IST" name="Interact_with_Template_Management_Fields" data-provider="TestData" finished-at="2025-05-12T23:54:48 IST" duration-ms="4360" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Category=Notification, Categoryfortemplatecreation=Promotions, CurrentStatus=Active, EditInitialStatusfortemplatemodify=Inactive, EditReason=Test, InitialStatusfortemplatecreation=Active, NotificationType=SMS, NotificationTypefortemplatecreation=EMAIL, Run=Yes, TemplateBody=Automation testing improves software quality by identifying defects early. Selenium with Java helps in UI testing, ensuring reliability and efficiency in development., TemplateNamefortemplatecreation=Test, TestScenario=AlertsTemplateManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Interact_with_Template_Management_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Interact_with_Template_Management_Fields status=SUCCESS method=AlertsTemplateManagement_TestClass.Interact_with_Template_Management_Fields(java.util.Map)[pri:5, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:48 IST" name="setupTest" finished-at="2025-05-12T23:54:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Clear_Input_Field_Test() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Clear_Input_Field_Test()[pri:6, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:48 IST" name="Clear_Input_Field_Test" finished-at="2025-05-12T23:54:51 IST" duration-ms="3178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Clear_Input_Field_Test -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Clear_Input_Field_Test status=SUCCESS method=AlertsTemplateManagement_TestClass.Clear_Input_Field_Test()[pri:6, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Display_Template_Details_Table()[pri:7, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:51 IST" name="Display_Template_Details_Table" finished-at="2025-05-12T23:54:54 IST" duration-ms="3215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Display_Template_Details_Table -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:51 IST" name="setupTest" finished-at="2025-05-12T23:54:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Display_Template_Details_Table() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Display_Template_Details_Table status=SUCCESS method=AlertsTemplateManagement_TestClass.Display_Template_Details_Table()[pri:7, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:54 IST" name="setupTest" finished-at="2025-05-12T23:54:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Test_Template_Pagination() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Template_Pagination()[pri:8, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:54 IST" name="Test_Template_Pagination" finished-at="2025-05-12T23:54:58 IST" duration-ms="4149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Template_Pagination -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:54:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Template_Pagination status=SUCCESS method=AlertsTemplateManagement_TestClass.Test_Template_Pagination()[pri:8, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:58 IST" name="setupTest" finished-at="2025-05-12T23:54:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.SMS_Template_Body_Character_Limit(java.util.Map) throws java.io.IOException,java.lang.ClassNotFoundException,java.sql.SQLException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMS_Template_Body_Character_Limit(java.util.Map)[pri:9, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:54:58 IST" name="SMS_Template_Body_Character_Limit" data-provider="TestData" finished-at="2025-05-12T23:55:06 IST" duration-ms="7228" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Category=Notification, Categoryfortemplatecreation=Promotions, CurrentStatus=Active, EditInitialStatusfortemplatemodify=Inactive, EditReason=Test, InitialStatusfortemplatecreation=Active, NotificationType=SMS, NotificationTypefortemplatecreation=EMAIL, Run=Yes, TemplateBody=Automation testing improves software quality by identifying defects early. Selenium with Java helps in UI testing, ensuring reliability and efficiency in development., TemplateNamefortemplatecreation=Test, TestScenario=AlertsTemplateManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMS_Template_Body_Character_Limit -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMS_Template_Body_Character_Limit status=SUCCESS method=AlertsTemplateManagement_TestClass.SMS_Template_Body_Character_Limit(java.util.Map)[pri:9, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:06 IST" name="setupTest" finished-at="2025-05-12T23:55:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Additional_Fields_for_Email_or_Notice(java.util.Map) throws java.io.IOException,java.lang.ClassNotFoundException,java.sql.SQLException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Additional_Fields_for_Email_or_Notice(java.util.Map)[pri:10, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:06 IST" name="Additional_Fields_for_Email_or_Notice" data-provider="TestData" finished-at="2025-05-12T23:55:10 IST" duration-ms="4196" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Category=Notification, Categoryfortemplatecreation=Promotions, CurrentStatus=Active, EditInitialStatusfortemplatemodify=Inactive, EditReason=Test, InitialStatusfortemplatecreation=Active, NotificationType=SMS, NotificationTypefortemplatecreation=EMAIL, Run=Yes, TemplateBody=Automation testing improves software quality by identifying defects early. Selenium with Java helps in UI testing, ensuring reliability and efficiency in development., TemplateNamefortemplatecreation=Test, TestScenario=AlertsTemplateManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Additional_Fields_for_Email_or_Notice -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Additional_Fields_for_Email_or_Notice status=SUCCESS method=AlertsTemplateManagement_TestClass.Additional_Fields_for_Email_or_Notice(java.util.Map)[pri:10, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Add_New_Template(java.util.Map)[pri:11, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:10 IST" name="Add_New_Template" data-provider="TestData" finished-at="2025-05-12T23:55:16 IST" duration-ms="6104" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Category=Notification, Categoryfortemplatecreation=Promotions, CurrentStatus=Active, EditInitialStatusfortemplatemodify=Inactive, EditReason=Test, InitialStatusfortemplatecreation=Active, NotificationType=SMS, NotificationTypefortemplatecreation=EMAIL, Run=Yes, TemplateBody=Automation testing improves software quality by identifying defects early. Selenium with Java helps in UI testing, ensuring reliability and efficiency in development., TemplateNamefortemplatecreation=Test, TestScenario=AlertsTemplateManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Template -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:10 IST" name="setupTest" finished-at="2025-05-12T23:55:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Add_New_Template(java.util.Map) throws java.io.IOException,java.lang.ClassNotFoundException,java.sql.SQLException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:16 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Template status=SUCCESS method=AlertsTemplateManagement_TestClass.Add_New_Template(java.util.Map)[pri:11, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:16 IST" name="setupTest" finished-at="2025-05-12T23:55:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Save_New_Template() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Save_New_Template()[pri:12, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:16 IST" name="Save_New_Template" finished-at="2025-05-12T23:55:21 IST" duration-ms="5177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Save_New_Template -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:21 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Save_New_Template status=SUCCESS method=AlertsTemplateManagement_TestClass.Save_New_Template()[pri:12, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="View_Template_Details()[pri:13, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:21 IST" name="View_Template_Details" finished-at="2025-05-12T23:55:25 IST" duration-ms="3990" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- View_Template_Details -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:21 IST" name="setupTest" finished-at="2025-05-12T23:55:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.View_Template_Details() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=View_Template_Details status=SUCCESS method=AlertsTemplateManagement_TestClass.View_Template_Details()[pri:13, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:25 IST" name="setupTest" finished-at="2025-05-12T23:55:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.Edit_Existing_Template(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Edit_Existing_Template(java.util.Map)[pri:14, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:25 IST" name="Edit_Existing_Template" data-provider="TestData" finished-at="2025-05-12T23:55:47 IST" duration-ms="21540" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Category=Notification, Categoryfortemplatecreation=Promotions, CurrentStatus=Active, EditInitialStatusfortemplatemodify=Inactive, EditReason=Test, InitialStatusfortemplatecreation=Active, NotificationType=SMS, NotificationTypefortemplatecreation=EMAIL, Run=Yes, TemplateBody=Automation testing improves software quality by identifying defects early. Selenium with Java helps in UI testing, ensuring reliability and efficiency in development., TemplateNamefortemplatecreation=Test, TestScenario=AlertsTemplateManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_Existing_Template -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Edit_Existing_Template status=SUCCESS method=AlertsTemplateManagement_TestClass.Edit_Existing_Template(java.util.Map)[pri:14, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:47 IST" name="setupTest" finished-at="2025-05-12T23:55:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsTemplateManagement_TestClass.View_Template_History() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="View_Template_History()[pri:15, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:47 IST" name="View_Template_History" finished-at="2025-05-12T23:55:51 IST" duration-ms="4016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- View_Template_History -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:51 IST" name="afterEachTest" finished-at="2025-05-12T23:55:52 IST" duration-ms="1131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c]" started-at="2025-05-12T23:55:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:55:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=View_Template_History status=SUCCESS method=AlertsTemplateManagement_TestClass.View_Template_History()[pri:15, instance:Core.AlertsandNotifications.AlertsTemplateManagement_TestClass@6d3a388c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
      </class> <!-- Core.AlertsandNotifications.AlertsTemplateManagement_TestClass -->
      <class name="Core.AlertsandNotifications.AlertsNotificationManagement_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:55:52 IST" name="SetUp" finished-at="2025-05-12T23:55:52 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:55:52 IST" name="setupTest" finished-at="2025-05-12T23:55:52 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Test_Login_with_Valid_Credentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Test_Login_with_Valid_Credentials()[pri:1, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:55:52 IST" name="Test_Login_with_Valid_Credentials" finished-at="2025-05-12T23:56:54 IST" duration-ms="62417" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_with_Valid_Credentials -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:56:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:56:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_Login_with_Valid_Credentials status=SUCCESS method=AlertsNotificationManagement_TestClass.Test_Login_with_Valid_Credentials()[pri:1, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:56:54 IST" name="setupTest" finished-at="2025-05-12T23:56:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Display_Alerts_and_Notifications_Menu_Option() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Display_Alerts_and_Notifications_Menu_Option()[pri:2, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:56:54 IST" name="Display_Alerts_and_Notifications_Menu_Option" finished-at="2025-05-12T23:57:02 IST" duration-ms="8053" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Display_Alerts_and_Notifications_Menu_Option -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:02 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Display_Alerts_and_Notifications_Menu_Option status=SUCCESS method=AlertsNotificationManagement_TestClass.Display_Alerts_and_Notifications_Menu_Option()[pri:2, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Access_Alerts_and_Notifications_Page()[pri:3, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:02 IST" name="Access_Alerts_and_Notifications_Page" finished-at="2025-05-12T23:57:06 IST" duration-ms="3179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Access_Alerts_and_Notifications_Page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:02 IST" name="setupTest" finished-at="2025-05-12T23:57:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Access_Alerts_and_Notifications_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Access_Alerts_and_Notifications_Page status=SUCCESS method=AlertsNotificationManagement_TestClass.Access_Alerts_and_Notifications_Page()[pri:3, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Notification_Management_Menu_Display()[pri:4, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:06 IST" name="Verify_Notification_Management_Menu_Display" finished-at="2025-05-12T23:57:10 IST" duration-ms="4871" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Notification_Management_Menu_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:06 IST" name="setupTest" finished-at="2025-05-12T23:57:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Notification_Management_Menu_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Notification_Management_Menu_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Notification_Management_Menu_Display()[pri:4, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Notification_Management_Type_Fields()[pri:5, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:10 IST" name="Verify_Notification_Management_Type_Fields" finished-at="2025-05-12T23:57:14 IST" duration-ms="3207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Notification_Management_Type_Fields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:10 IST" name="setupTest" finished-at="2025-05-12T23:57:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Notification_Management_Type_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Category_Fields()[pri:6, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:14 IST" name="Verify_Category_Fields" finished-at="2025-05-12T23:57:17 IST" duration-ms="3214" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Category_Fields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:14 IST" name="setupTest" finished-at="2025-05-12T23:57:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Category_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Notification_Management_Type_Fields status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Notification_Management_Type_Fields()[pri:5, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Category_Fields status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Category_Fields()[pri:6, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Schedule_Type_Fields()[pri:7, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:17 IST" name="Verify_Schedule_Type_Fields" finished-at="2025-05-12T23:57:20 IST" duration-ms="3282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Schedule_Type_Fields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:17 IST" name="setupTest" finished-at="2025-05-12T23:57:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Schedule_Type_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Schedule_Type_Fields status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Schedule_Type_Fields()[pri:7, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Status_Fields()[pri:8, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:20 IST" name="Verify_Status_Fields" finished-at="2025-05-12T23:57:23 IST" duration-ms="3214" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Status_Fields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:20 IST" name="setupTest" finished-at="2025-05-12T23:57:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Status_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:23 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Status_Fields status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Status_Fields()[pri:8, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Schedule_Type_Column_Display()[pri:9, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:23 IST" name="Verify_Schedule_Type_Column_Display" finished-at="2025-05-12T23:57:26 IST" duration-ms="3041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Schedule_Type_Column_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:23 IST" name="setupTest" finished-at="2025-05-12T23:57:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Schedule_Type_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:26 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Schedule_Type_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Schedule_Type_Column_Display()[pri:9, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:26 IST" name="setupTest" finished-at="2025-05-12T23:57:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Template_Name_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Template_Name_Column_Display()[pri:10, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:26 IST" name="Verify_Template_Name_Column_Display" finished-at="2025-05-12T23:57:29 IST" duration-ms="3046" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Template_Name_Column_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Template_Name_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Template_Name_Column_Display()[pri:10, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:29 IST" name="setupTest" finished-at="2025-05-12T23:57:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Schedule_Start_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Schedule_Start_Column_Display()[pri:11, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:29 IST" name="Verify_Schedule_Start_Column_Display" finished-at="2025-05-12T23:57:33 IST" duration-ms="3138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Schedule_Start_Column_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Schedule_Start_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Schedule_Start_Column_Display()[pri:11, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Schedule_End_Column_Display()[pri:12, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:33 IST" name="Verify_Schedule_End_Column_Display" finished-at="2025-05-12T23:57:36 IST" duration-ms="3166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Schedule_End_Column_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:33 IST" name="setupTest" finished-at="2025-05-12T23:57:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Schedule_End_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Schedule_End_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Schedule_End_Column_Display()[pri:12, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Time_Column_Display()[pri:13, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:36 IST" name="Verify_Time_Column_Display" finished-at="2025-05-12T23:57:39 IST" duration-ms="3056" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Time_Column_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:36 IST" name="setupTest" finished-at="2025-05-12T23:57:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Time_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Time_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Time_Column_Display()[pri:13, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Recurrence_Column_Display()[pri:14, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:39 IST" name="Verify_Recurrence_Column_Display" finished-at="2025-05-12T23:57:42 IST" duration-ms="3056" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Recurrence_Column_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:39 IST" name="setupTest" finished-at="2025-05-12T23:57:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Recurrence_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Recurrence_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Recurrence_Column_Display()[pri:14, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Day_of_Week_Column_Display()[pri:15, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:42 IST" name="Verify_Day_of_Week_Column_Display" finished-at="2025-05-12T23:57:45 IST" duration-ms="3043" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Day_of_Week_Column_Display -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:42 IST" name="setupTest" finished-at="2025-05-12T23:57:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Day_of_Week_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Day_of_Week_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Day_of_Week_Column_Display()[pri:15, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:45 IST" name="setupTest" finished-at="2025-05-12T23:57:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Day_of_Month_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Day_of_Month_Column_Display()[pri:16, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:45 IST" name="Verify_Day_of_Month_Column_Display" finished-at="2025-05-12T23:57:48 IST" duration-ms="3040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Day_of_Month_Column_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Day_of_Month_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Day_of_Month_Column_Display()[pri:16, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:48 IST" name="setupTest" finished-at="2025-05-12T23:57:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Status_Column_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Status_Column_Display()[pri:17, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:48 IST" name="Verify_Status_Column_Display" finished-at="2025-05-12T23:57:51 IST" duration-ms="3048" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Status_Column_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Status_Column_Display status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Status_Column_Display()[pri:17, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_the_pagination()[pri:18, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:51 IST" name="Verify_the_pagination" finished-at="2025-05-12T23:57:54 IST" duration-ms="3085" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_pagination -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:51 IST" name="setupTest" finished-at="2025-05-12T23:57:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_the_pagination() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_pagination status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_the_pagination()[pri:18, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:54 IST" name="setupTest" finished-at="2025-05-12T23:57:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_the_functionality_of_search_button(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_the_functionality_of_search_button(java.util.Map)[pri:19, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:54 IST" name="Verify_the_functionality_of_search_button" data-provider="TestData" finished-at="2025-05-12T23:57:58 IST" duration-ms="3936" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Run=Yes, ScheduleType=One Time, TestScenario=AlertsNotificationManagement}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_functionality_of_search_button -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:57:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_functionality_of_search_button status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_the_functionality_of_search_button(java.util.Map)[pri:19, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:58 IST" name="setupTest" finished-at="2025-05-12T23:57:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_the_functionality_of_cross_button_in_input_fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_the_functionality_of_cross_button_in_input_fields()[pri:20, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:57:58 IST" name="Verify_the_functionality_of_cross_button_in_input_fields" finished-at="2025-05-12T23:58:01 IST" duration-ms="3178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_functionality_of_cross_button_in_input_fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:58:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_functionality_of_cross_button_in_input_fields status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_the_functionality_of_cross_button_in_input_fields()[pri:20, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Configure_Button_Click()[pri:21, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:01 IST" name="Verify_Configure_Button_Click" finished-at="2025-05-12T23:58:05 IST" duration-ms="3254" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Configure_Button_Click -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:01 IST" name="setupTest" finished-at="2025-05-12T23:58:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Configure_Button_Click() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:58:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Configure_Button_Click status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Configure_Button_Click()[pri:21, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:05 IST" name="setupTest" finished-at="2025-05-12T23:58:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_UI_Elements_Presence() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_UI_Elements_Presence()[pri:22, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:05 IST" name="Verify_UI_Elements_Presence" finished-at="2025-05-12T23:58:13 IST" duration-ms="8145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_UI_Elements_Presence -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:13 IST" name="setupTest" finished-at="2025-05-12T23:58:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsNotificationManagement_TestClass.Verify_Edit_Button_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:58:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_UI_Elements_Presence status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_UI_Elements_Presence()[pri:22, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Edit_Button_Functionality()[pri:23, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:13 IST" name="Verify_Edit_Button_Functionality" finished-at="2025-05-12T23:58:28 IST" duration-ms="15204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Edit_Button_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:58:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Edit_Button_Functionality status=SUCCESS method=AlertsNotificationManagement_TestClass.Verify_Edit_Button_Functionality()[pri:23, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.AlertsandNotifications.AlertsNotificationManagement_TestClass@193f604a]" started-at="2025-05-12T23:58:28 IST" name="afterEachTest" finished-at="2025-05-12T23:58:29 IST" duration-ms="1197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.AlertsandNotifications.AlertsNotificationManagement_TestClass -->
      <class name="Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:25 IST" name="SetUp" finished-at="2025-05-12T23:51:25 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:25 IST" name="setupTest" finished-at="2025-05-12T23:51:25 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Insert_New_Entry_All_Valid_Fields() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Insert_New_Entry_All_Valid_Fields()[pri:1, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:25 IST" name="Insert_New_Entry_All_Valid_Fields" finished-at="2025-05-12T23:51:29 IST" duration-ms="3475" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Insert_New_Entry_All_Valid_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:51:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Insert_New_Entry_All_Valid_Fields status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Insert_New_Entry_All_Valid_Fields()[pri:1, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Successful_Login()[pri:2, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:29 IST" name="Successful_Login" finished-at="2025-05-12T23:52:49 IST" duration-ms="80702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Successful_Login -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:51:29 IST" name="setupTest" finished-at="2025-05-12T23:51:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Successful_Login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:52:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Successful_Login status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Successful_Login()[pri:2, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:49 IST" name="setupTest" finished-at="2025-05-12T23:52:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Access_Alerts_and_Notifications() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Access_Alerts_and_Notifications()[pri:3, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:49 IST" name="Access_Alerts_and_Notifications" finished-at="2025-05-12T23:52:57 IST" duration-ms="8155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Access_Alerts_and_Notifications -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:52:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Access_Alerts_and_Notifications status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Access_Alerts_and_Notifications()[pri:3, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:57 IST" name="setupTest" finished-at="2025-05-12T23:52:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Access_Placeholder_Management() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Access_Placeholder_Management()[pri:4, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:52:57 IST" name="Access_Placeholder_Management" finished-at="2025-05-12T23:53:01 IST" duration-ms="3819" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Access_Placeholder_Management -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:53:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Access_Placeholder_Management status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Access_Placeholder_Management()[pri:4, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:01 IST" name="setupTest" finished-at="2025-05-12T23:53:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Pagination_Controls_Display() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Pagination_Controls_Display()[pri:5, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:01 IST" name="Pagination_Controls_Display" finished-at="2025-05-12T23:53:09 IST" duration-ms="8077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pagination_Controls_Display -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:53:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Pagination_Controls_Display status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Pagination_Controls_Display()[pri:5, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Paginate_to_Next_Page()[pri:6, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:09 IST" name="Paginate_to_Next_Page" finished-at="2025-05-12T23:53:13 IST" duration-ms="3718" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Paginate_to_Next_Page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:09 IST" name="setupTest" finished-at="2025-05-12T23:53:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Paginate_to_Next_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:53:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Paginate_to_Next_Page status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Paginate_to_Next_Page()[pri:6, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Paginate_to_Previous_Page()[pri:7, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:13 IST" name="Paginate_to_Previous_Page" finished-at="2025-05-12T23:53:17 IST" duration-ms="3706" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Paginate_to_Previous_Page -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:13 IST" name="setupTest" finished-at="2025-05-12T23:53:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Paginate_to_Previous_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:53:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Paginate_to_Previous_Page status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Paginate_to_Previous_Page()[pri:7, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_Placeholder()[pri:8, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:17 IST" name="Search_Placeholder" finished-at="2025-05-12T23:53:21 IST" duration-ms="3939" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Placeholder -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:17 IST" name="setupTest" finished-at="2025-05-12T23:53:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass.Search_Placeholder() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:21 IST" name="afterEachTest" finished-at="2025-05-12T23:53:22 IST" duration-ms="1132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7]" started-at="2025-05-12T23:53:21 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:53:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Placeholder status=SUCCESS method=AlertsPlaceholderManagement_TestClass.Search_Placeholder()[pri:8, instance:Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
      </class> <!-- Core.AlertsandNotifications.AlertsPlaceholderManagement_TestClass -->
      <class name="Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass">
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:58:29 IST" name="setupTest" finished-at="2025-05-12T23:58:29 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Login_and_Navigate_to_Mask_Account_Window() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:58:29 IST" name="SetUp" finished-at="2025-05-12T23:58:29 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method signature="Login_and_Navigate_to_Mask_Account_Window()[pri:1, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:58:29 IST" name="Login_and_Navigate_to_Mask_Account_Window" finished-at="2025-05-12T23:59:43 IST" duration-ms="73611" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigate_to_Mask_Account_Window -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:59:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigate_to_Mask_Account_Window status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Login_and_Navigate_to_Mask_Account_Window()[pri:1, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:43 IST" name="setupTest" finished-at="2025-05-12T23:59:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Mask_Account_with_Valid_Details(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mask_Account_with_Valid_Details(java.util.Map)[pri:2, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:43 IST" name="Mask_Account_with_Valid_Details" data-provider="TestData" finished-at="2025-05-12T23:59:56 IST" duration-ms="12814" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mask_Account_with_Valid_Details -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-12T23:59:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mask_Account_with_Valid_Details status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Mask_Account_with_Valid_Details(java.util.Map)[pri:2, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:56 IST" name="setupTest" finished-at="2025-05-12T23:59:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Masking_Request() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Approve_Masking_Request()[pri:3, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-12T23:59:56 IST" name="Approve_Masking_Request" finished-at="2025-05-13T00:04:32 IST" duration-ms="276514" status="FAIL">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Approval success message not displayed within the expected time. Please try again.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Approval success message not displayed within the expected time. Please try again.
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.getapprovalSuccessMessage(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:353)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Masking_Request(AlertsMaskAccountAndMaskingAuthorization_TestClass.java:161)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.xpath: //p[text()='Request approved successfully.'] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:60962}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:60962/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: d8e4d6e988565ef5f4648cc08c8e09dc
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.getapprovalSuccessMessage(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:345)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Approve_Masking_Request -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:04:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:04:32 IST" duration-ms="203" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Approve_Masking_Request status=FAILURE method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Masking_Request()[pri:3, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:04:32 IST" name="setupTest" finished-at="2025-05-13T00:04:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Validate_Masked_Account_in_Notification_Management(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Masked_Account_in_Notification_Management(java.util.Map)[pri:4, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:04:32 IST" name="Validate_Masked_Account_in_Notification_Management" data-provider="TestData" finished-at="2025-05-13T00:05:58 IST" duration-ms="85315" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Masked_Account_in_Notification_Management -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:05:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:05:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Masked_Account_in_Notification_Management status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Validate_Masked_Account_in_Notification_Management(java.util.Map)[pri:4, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:05:58 IST" name="setupTest" finished-at="2025-05-13T00:05:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Unmask_Account(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Unmask_Account(java.util.Map)[pri:5, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:05:58 IST" name="Unmask_Account" data-provider="TestData" finished-at="2025-05-13T00:06:05 IST" duration-ms="7385" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Unmask_Account -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:06:05 IST" name="setupTest" finished-at="2025-05-13T00:06:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Unmask_Request() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:06:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:06:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Unmask_Account status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Unmask_Account(java.util.Map)[pri:5, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Approve_Unmask_Request()[pri:6, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:06:05 IST" name="Approve_Unmask_Request" finished-at="2025-05-13T00:10:17 IST" duration-ms="251952" status="FAIL">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Approval success message not displayed within the expected time. Please try again.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Approval success message not displayed within the expected time. Please try again.
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.getapprovalSuccessMessage(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:353)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Unmask_Request(AlertsMaskAccountAndMaskingAuthorization_TestClass.java:266)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.xpath: //p[text()='Request approved successfully.'] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61040}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61040/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 308cdea491c84638bcb8d495a51c94ff
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.getapprovalSuccessMessage(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:345)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Approve_Unmask_Request -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:10:17 IST" duration-ms="168" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Approve_Unmask_Request status=FAILURE method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Approve_Unmask_Request()[pri:6, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:17 IST" name="setupTest" finished-at="2025-05-13T00:10:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Account_Number_Field_BVA_Validations() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_BVA_Validations()[pri:7, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:17 IST" name="Account_Number_Field_BVA_Validations" finished-at="2025-05-13T00:10:42 IST" duration-ms="24405" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_BVA_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:10:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_BVA_Validations status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Account_Number_Field_BVA_Validations()[pri:7, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:42 IST" name="setupTest" finished-at="2025-05-13T00:10:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Account_Number_Field_ECP_Validations() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_ECP_Validations()[pri:8, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:10:42 IST" name="Account_Number_Field_ECP_Validations" finished-at="2025-05-13T00:11:00 IST" duration-ms="18528" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_ECP_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:11:00 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:11:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_ECP_Validations status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Account_Number_Field_ECP_Validations()[pri:8, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:11:00 IST" name="setupTest" finished-at="2025-05-13T00:11:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Enter_Invalid_Account_Number(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Invalid_Account_Number(java.util.Map)[pri:9, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:11:00 IST" name="Enter_Invalid_Account_Number" data-provider="TestData" finished-at="2025-05-13T00:14:06 IST" duration-ms="185770" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of element located by By.xpath: //p[text()='Invalid account.'] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61040}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61040/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 308cdea491c84638bcb8d495a51c94ff]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.xpath: //p[text()='Invalid account.'] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61040}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61040/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 308cdea491c84638bcb8d495a51c94ff
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.getErrorMessage(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:603)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Enter_Invalid_Account_Number(AlertsMaskAccountAndMaskingAuthorization_TestClass.java:336)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Invalid_Account_Number -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:14:06 IST" duration-ms="149" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Invalid_Account_Number status=FAILURE method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Enter_Invalid_Account_Number(java.util.Map)[pri:9, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:06 IST" name="setupTest" finished-at="2025-05-13T00:14:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Leave_Account_Number_Empty() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Leave_Account_Number_Empty()[pri:10, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:06 IST" name="Leave_Account_Number_Empty" finished-at="2025-05-13T00:14:19 IST" duration-ms="13472" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Leave_Account_Number_Empty -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:14:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Leave_Account_Number_Empty status=SUCCESS method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Leave_Account_Number_Empty()[pri:10, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:20 IST" name="setupTest" finished-at="2025-05-13T00:14:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Confirm_Masking_Without_Reason(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Confirm_Masking_Without_Reason(java.util.Map)[pri:11, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:14:20 IST" name="Confirm_Masking_Without_Reason" data-provider="TestData" finished-at="2025-05-13T00:17:22 IST" duration-ms="181986" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of element located by By.xpath: //label[text()='Status']//following-sibling::div (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61040}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61040/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 308cdea491c84638bcb8d495a51c94ff]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.xpath: //label[text()='Status']//following-sibling::div (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61040}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61040/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 308cdea491c84638bcb8d495a51c94ff
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_MainClass.selectMaskStatus(AlertsMaskAccountAndMaskingAuthorization_MainClass.java:135)
at Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass.Confirm_Masking_Without_Reason(AlertsMaskAccountAndMaskingAuthorization_TestClass.java:380)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Confirm_Masking_Without_Reason -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:17:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:17:22 IST" duration-ms="146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Confirm_Masking_Without_Reason status=FAILURE method=AlertsMaskAccountAndMaskingAuthorization_TestClass.Confirm_Masking_Without_Reason(java.util.Map)[pri:11, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass@20f5239f]" started-at="2025-05-13T00:17:22 IST" name="afterEachTest" finished-at="2025-05-13T00:17:27 IST" duration-ms="5290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.AlertsandNotifications.AlertsMaskAccountAndMaskingAuthorization_TestClass -->
    </test> <!-- Core - alerts and notifications -->
    <test started-at="2025-05-13T00:17:27 IST" name="Core - collection agency - Agency Account Allocation module" finished-at="2025-05-13T00:29:37 IST" duration-ms="729525">
      <class name="Core.CollectionAgency.AgencyAccountAllocation_TestClass">
        <test-method is-config="true" signature="reference()[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:27 IST" name="reference" finished-at="2025-05-13T00:17:27 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reference -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:27 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:17:28 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.testUpdateProperties() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="testUpdateProperties()[pri:1, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:28 IST" name="testUpdateProperties" finished-at="2025-05-13T00:17:28 IST" duration-ms="496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateProperties -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:28 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:17:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateProperties status=SUCCESS method=AgencyAccountAllocation_TestClass.testUpdateProperties()[pri:1, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:28 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:17:28 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.UpdateDataInDB()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="UpdateDataInDB()[pri:2, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:28 IST" name="UpdateDataInDB" finished-at="2025-05-13T00:17:32 IST" duration-ms="3187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateDataInDB -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:17:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateDataInDB status=SUCCESS method=AgencyAccountAllocation_TestClass.UpdateDataInDB()[pri:2, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:32 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:17:32 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.DeleteDataInDB()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="DeleteDataInDB()[pri:3, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:32 IST" name="DeleteDataInDB" finished-at="2025-05-13T00:17:34 IST" duration-ms="1761" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteDataInDB -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:34 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:17:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDataInDB status=SUCCESS method=AgencyAccountAllocation_TestClass.DeleteDataInDB()[pri:3, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:34 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:17:34 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.LogInToApp() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="LogInToApp()[pri:4, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:17:34 IST" name="LogInToApp" finished-at="2025-05-13T00:18:36 IST" duration-ms="61750" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LogInToApp -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:18:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LogInToApp status=SUCCESS method=AgencyAccountAllocation_TestClass.LogInToApp()[pri:4, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:36 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:18:37 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.NavigationToAgencyAccountAllocation() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NavigationToAgencyAccountAllocation()[pri:5, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:37 IST" name="NavigationToAgencyAccountAllocation" finished-at="2025-05-13T00:18:58 IST" duration-ms="21356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigationToAgencyAccountAllocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:18:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NavigationToAgencyAccountAllocation status=SUCCESS method=AgencyAccountAllocation_TestClass.NavigationToAgencyAccountAllocation()[pri:5, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:58 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:18:59 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.AccountTypeDropdownBasicFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="AccountTypeDropdownBasicFunctionality()[pri:6, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:18:59 IST" name="AccountTypeDropdownBasicFunctionality" finished-at="2025-05-13T00:20:08 IST" duration-ms="69411" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AccountTypeDropdownBasicFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:08 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:20:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AccountTypeDropdownBasicFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.AccountTypeDropdownBasicFunctionality()[pri:6, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:08 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:20:08 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.AssetCategoryDropdownBasicFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="AssetCategoryDropdownBasicFunctionality()[pri:7, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:08 IST" name="AssetCategoryDropdownBasicFunctionality" finished-at="2025-05-13T00:20:25 IST" duration-ms="16187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AssetCategoryDropdownBasicFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:20:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AssetCategoryDropdownBasicFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.AssetCategoryDropdownBasicFunctionality()[pri:7, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:25 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:20:25 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.SMACategoryActivation() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SMACategoryActivation()[pri:8, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:25 IST" name="SMACategoryActivation" finished-at="2025-05-13T00:20:54 IST" duration-ms="29187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMACategoryActivation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:20:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMACategoryActivation status=SUCCESS method=AgencyAccountAllocation_TestClass.SMACategoryActivation()[pri:8, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:54 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:20:55 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.NPACategoryActivation() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="NPACategoryActivation()[pri:9, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:20:55 IST" name="NPACategoryActivation" finished-at="2025-05-13T00:21:47 IST" duration-ms="51772" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPACategoryActivation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:21:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:21:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPACategoryActivation status=SUCCESS method=AgencyAccountAllocation_TestClass.NPACategoryActivation()[pri:9, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:21:47 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:21:47 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.zoneDropdownBasicFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="zoneDropdownBasicFunctionality()[pri:10, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:21:47 IST" name="zoneDropdownBasicFunctionality" finished-at="2025-05-13T00:22:09 IST" duration-ms="22154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zoneDropdownBasicFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:22:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=zoneDropdownBasicFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.zoneDropdownBasicFunctionality()[pri:10, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:09 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:22:10 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.zoneandRegionDropdownDependencyTest() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="zoneandRegionDropdownDependencyTest()[pri:11, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:10 IST" name="zoneandRegionDropdownDependencyTest" finished-at="2025-05-13T00:22:37 IST" duration-ms="26989" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zoneandRegionDropdownDependencyTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:37 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:22:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=zoneandRegionDropdownDependencyTest status=SUCCESS method=AgencyAccountAllocation_TestClass.zoneandRegionDropdownDependencyTest()[pri:11, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:37 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:22:37 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.RegionandBranchDependency() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="RegionandBranchDependency()[pri:12, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:22:37 IST" name="RegionandBranchDependency" finished-at="2025-05-13T00:23:06 IST" duration-ms="29083" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RegionandBranchDependency -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:23:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RegionandBranchDependency status=SUCCESS method=AgencyAccountAllocation_TestClass.RegionandBranchDependency()[pri:12, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:06 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:23:07 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.SetDPDValue(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SetDPDValue(java.util.Map)[pri:13, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:07 IST" name="SetDPDValue" data-provider="TestData" finished-at="2025-05-13T00:23:24 IST" duration-ms="16804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{DPD=250, Run=Yes, TestScenario=Agency_Account_Allocation}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetDPDValue -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:23:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SetDPDValue status=SUCCESS method=AgencyAccountAllocation_TestClass.SetDPDValue(java.util.Map)[pri:13, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:24 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:23:24 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.SearchButtonFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SearchButtonFunctionality()[pri:14, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:24 IST" name="SearchButtonFunctionality" finished-at="2025-05-13T00:23:44 IST" duration-ms="20243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchButtonFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:23:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchButtonFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.SearchButtonFunctionality()[pri:14, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:44 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:23:45 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.OutputGridDataVerification(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="OutputGridDataVerification(java.util.Map)[pri:15, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:45 IST" name="OutputGridDataVerification" data-provider="TestData" finished-at="2025-05-13T00:23:49 IST" duration-ms="4035" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{DPD=250, Run=Yes, TestScenario=Agency_Account_Allocation}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OutputGridDataVerification -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:23:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OutputGridDataVerification status=SUCCESS method=AgencyAccountAllocation_TestClass.OutputGridDataVerification(java.util.Map)[pri:15, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:49 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:23:50 IST" duration-ms="504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.AllocationDateNonEditability() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="AllocationDateNonEditability()[pri:16, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:50 IST" name="AllocationDateNonEditability" finished-at="2025-05-13T00:23:53 IST" duration-ms="3081" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AllocationDateNonEditability -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:53 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:23:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AllocationDateNonEditability status=SUCCESS method=AgencyAccountAllocation_TestClass.AllocationDateNonEditability()[pri:16, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:53 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:23:53 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.AllocateButtonFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="AllocateButtonFunctionality()[pri:17, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:23:53 IST" name="AllocateButtonFunctionality" finished-at="2025-05-13T00:24:15 IST" duration-ms="21457" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AllocateButtonFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:15 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:24:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AllocateButtonFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.AllocateButtonFunctionality()[pri:17, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:15 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:24:15 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.VerifyAllocatedAccountsInDBTable() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyAllocatedAccountsInDBTable()[pri:18, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:15 IST" name="VerifyAllocatedAccountsInDBTable" finished-at="2025-05-13T00:24:19 IST" duration-ms="3592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAllocatedAccountsInDBTable -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:24:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyAllocatedAccountsInDBTable status=SUCCESS method=AgencyAccountAllocation_TestClass.VerifyAllocatedAccountsInDBTable()[pri:18, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:19 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:24:19 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.VerifyAllocatedListButtonispresent() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyAllocatedListButtonispresent()[pri:19, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:19 IST" name="VerifyAllocatedListButtonispresent" finished-at="2025-05-13T00:24:22 IST" duration-ms="3030" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAllocatedListButtonispresent -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:24:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyAllocatedListButtonispresent status=SUCCESS method=AgencyAccountAllocation_TestClass.VerifyAllocatedListButtonispresent()[pri:19, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:22 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:24:23 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.VerifyPopupOpenswhenclickonAllocatedListbutton() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyPopupOpenswhenclickonAllocatedListbutton()[pri:20, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:23 IST" name="VerifyPopupOpenswhenclickonAllocatedListbutton" finished-at="2025-05-13T00:24:59 IST" duration-ms="36420" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyPopupOpenswhenclickonAllocatedListbutton -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:24:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyPopupOpenswhenclickonAllocatedListbutton status=SUCCESS method=AgencyAccountAllocation_TestClass.VerifyPopupOpenswhenclickonAllocatedListbutton()[pri:20, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:24:59 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:00 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.AgencyNameDropdownBasicFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="AgencyNameDropdownBasicFunctionality()[pri:21, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:00 IST" name="AgencyNameDropdownBasicFunctionality" finished-at="2025-05-13T00:25:35 IST" duration-ms="35719" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AgencyNameDropdownBasicFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:25:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AgencyNameDropdownBasicFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.AgencyNameDropdownBasicFunctionality()[pri:21, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:35 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:36 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.ActionDateFromPicker() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="ActionDateFromPicker()[pri:22, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:36 IST" name="ActionDateFromPicker" finished-at="2025-05-13T00:25:39 IST" duration-ms="3035" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ActionDateFromPicker -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:25:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ActionDateFromPicker status=SUCCESS method=AgencyAccountAllocation_TestClass.ActionDateFromPicker()[pri:22, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:39 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:39 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.ActionDateToPicker() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="ActionDateToPicker()[pri:23, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:39 IST" name="ActionDateToPicker" finished-at="2025-05-13T00:25:42 IST" duration-ms="3027" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ActionDateToPicker -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:25:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ActionDateToPicker status=SUCCESS method=AgencyAccountAllocation_TestClass.ActionDateToPicker()[pri:23, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:42 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:43 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.SearchButtonBasicFunctionality() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="SearchButtonBasicFunctionality()[pri:24, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:43 IST" name="SearchButtonBasicFunctionality" finished-at="2025-05-13T00:25:50 IST" duration-ms="7221" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchButtonBasicFunctionality -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:50 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:51 IST" duration-ms="503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.ValidateOutputColumnsInGrid() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:25:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchButtonBasicFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.SearchButtonBasicFunctionality()[pri:24, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="ValidateOutputColumnsInGrid()[pri:25, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:51 IST" name="ValidateOutputColumnsInGrid" finished-at="2025-05-13T00:25:54 IST" duration-ms="3333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateOutputColumnsInGrid -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:25:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateOutputColumnsInGrid status=SUCCESS method=AgencyAccountAllocation_TestClass.ValidateOutputColumnsInGrid()[pri:25, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:54 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:25:54 IST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename()[pri:26, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:25:54 IST" name="DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename" finished-at="2025-05-13T00:26:06 IST" duration-ms="11550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:06 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:26:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename status=SUCCESS method=AgencyAccountAllocation_TestClass.DownloadExcelButtonEnabledOnlyWhenSelected_ValidateDataExcelFilename()[pri:26, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:06 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:26:07 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.ResetButtonClearFilters() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="ResetButtonClearFilters()[pri:27, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:07 IST" name="ResetButtonClearFilters" finished-at="2025-05-13T00:26:35 IST" duration-ms="28948" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ResetButtonClearFilters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:26:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ResetButtonClearFilters status=SUCCESS method=AgencyAccountAllocation_TestClass.ResetButtonClearFilters()[pri:27, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:35 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:26:36 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.DownloadExcelDisabledWhenNoSelection() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="DownloadExcelDisabledWhenNoSelection()[pri:28, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:36 IST" name="DownloadExcelDisabledWhenNoSelection" finished-at="2025-05-13T00:26:39 IST" duration-ms="3050" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DownloadExcelDisabledWhenNoSelection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:26:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DownloadExcelDisabledWhenNoSelection status=SUCCESS method=AgencyAccountAllocation_TestClass.DownloadExcelDisabledWhenNoSelection()[pri:28, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:39 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:26:40 IST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.InvalidSearchwithEmptyFields() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="InvalidSearchwithEmptyFields()[pri:29, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:40 IST" name="InvalidSearchwithEmptyFields" finished-at="2025-05-13T00:26:47 IST" duration-ms="7439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InvalidSearchwithEmptyFields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:26:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=InvalidSearchwithEmptyFields status=SUCCESS method=AgencyAccountAllocation_TestClass.InvalidSearchwithEmptyFields()[pri:29, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:47 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:26:47 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.CloseAllocatedListPopup() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="CloseAllocatedListPopup()[pri:30, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:47 IST" name="CloseAllocatedListPopup" finished-at="2025-05-13T00:26:55 IST" duration-ms="7484" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseAllocatedListPopup -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:26:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CloseAllocatedListPopup status=SUCCESS method=AgencyAccountAllocation_TestClass.CloseAllocatedListPopup()[pri:30, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="ExtentTestManagerStartTest(java.lang.reflect.Method)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:55 IST" name="ExtentTestManagerStartTest" finished-at="2025-05-13T00:26:55 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.CollectionAgency.AgencyAccountAllocation_TestClass.VerifyDeallocatedAccountsFunctionality(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExtentTestManagerStartTest -->
        <test-method signature="VerifyDeallocatedAccountsFunctionality(java.util.Map)[pri:31, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:26:55 IST" name="VerifyDeallocatedAccountsFunctionality" data-provider="TestData" finished-at="2025-05-13T00:29:35 IST" duration-ms="159664" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{DPD=250, Run=Yes, TestScenario=Agency_Account_Allocation}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDeallocatedAccountsFunctionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:29:35 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:29:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyDeallocatedAccountsFunctionality status=SUCCESS method=AgencyAccountAllocation_TestClass.VerifyDeallocatedAccountsFunctionality(java.util.Map)[pri:31, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="AfterClass()[pri:0, instance:Core.CollectionAgency.AgencyAccountAllocation_TestClass@73700b80]" started-at="2025-05-13T00:29:35 IST" name="AfterClass" finished-at="2025-05-13T00:29:37 IST" duration-ms="1366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- Core.CollectionAgency.AgencyAccountAllocation_TestClass -->
    </test> <!-- Core - collection agency - Agency Account Allocation module -->
    <test started-at="2025-05-13T00:29:37 IST" name="Core - Summary reports" finished-at="2025-05-13T00:39:45 IST" duration-ms="608031">
      <class name="Core.SummaryReports.BankRegularizationSummary_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:38:02 IST" name="SetUp" finished-at="2025-05-13T00:38:02 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:38:02 IST" name="setupTest" finished-at="2025-05-13T00:38:02 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Validate_Navigation_to_Bank_Regularization_Summary() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Navigation_to_Bank_Regularization_Summary()[pri:1, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:38:02 IST" name="Validate_Navigation_to_Bank_Regularization_Summary" finished-at="2025-05-13T00:39:07 IST" duration-ms="64602" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Navigation_to_Bank_Regularization_Summary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:07 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Navigation_to_Bank_Regularization_Summary status=SUCCESS method=BankRegularizationSummary_TestClass.Validate_Navigation_to_Bank_Regularization_Summary()[pri:1, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED()[pri:2, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:07 IST" name="Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED" finished-at="2025-05-13T00:39:10 IST" duration-ms="3632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:07 IST" name="setupTest" finished-at="2025-05-13T00:39:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED status=SUCCESS method=BankRegularizationSummary_TestClass.Inserting_TRN_AC_MOVEMENT_table_with_AC_MOVEMENT_DATE_Current_date_MOVEMENT_TYPE_4_and_MOVEMENT_TYPE_CATEGORY_REMOVED()[pri:2, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Validate_Data_Execution_for_Bank_Regularization_Summary()[pri:3, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:10 IST" name="Validate_Data_Execution_for_Bank_Regularization_Summary" finished-at="2025-05-13T00:39:15 IST" duration-ms="5149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Data_Execution_for_Bank_Regularization_Summary -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:10 IST" name="setupTest" finished-at="2025-05-13T00:39:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Validate_Data_Execution_for_Bank_Regularization_Summary() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:15 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Data_Execution_for_Bank_Regularization_Summary status=SUCCESS method=BankRegularizationSummary_TestClass.Validate_Data_Execution_for_Bank_Regularization_Summary()[pri:3, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:15 IST" name="setupTest" finished-at="2025-05-13T00:39:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Validate_Data_in_Bank_Regularization_Summary_page(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Data_in_Bank_Regularization_Summary_page(java.util.Map)[pri:4, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:15 IST" name="Validate_Data_in_Bank_Regularization_Summary_page" data-provider="TestData" finished-at="2025-05-13T00:39:26 IST" duration-ms="10249" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Branch=Amaravati, Region=Mumbai I, Run=Yes, TestScenario=CoreBankRegularizationSummary}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Data_in_Bank_Regularization_Summary_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:26 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Data_in_Bank_Regularization_Summary_page status=SUCCESS method=BankRegularizationSummary_TestClass.Validate_Data_in_Bank_Regularization_Summary_page(java.util.Map)[pri:4, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:26 IST" name="setupTest" finished-at="2025-05-13T00:39:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Validate_Count_and_OS_Amount_Without_Query_Execution() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Count_and_OS_Amount_Without_Query_Execution()[pri:5, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:26 IST" name="Validate_Count_and_OS_Amount_Without_Query_Execution" finished-at="2025-05-13T00:39:29 IST" duration-ms="3185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Count_and_OS_Amount_Without_Query_Execution -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:29 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Count_and_OS_Amount_Without_Query_Execution status=SUCCESS method=BankRegularizationSummary_TestClass.Validate_Count_and_OS_Amount_Without_Query_Execution()[pri:5, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:29 IST" name="setupTest" finished-at="2025-05-13T00:39:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Validate_Data_Consistency_in_Export() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Data_Consistency_in_Export()[pri:6, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:29 IST" name="Validate_Data_Consistency_in_Export" finished-at="2025-05-13T00:39:38 IST" duration-ms="9554" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Data_Consistency_in_Export -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:38 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Data_Consistency_in_Export status=SUCCESS method=BankRegularizationSummary_TestClass.Validate_Data_Consistency_in_Export()[pri:6, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:38 IST" name="setupTest" finished-at="2025-05-13T00:39:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankRegularizationSummary_TestClass.Mandatory_Fields_Empty_Validation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Fields_Empty_Validation()[pri:7, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:38 IST" name="Mandatory_Fields_Empty_Validation" finished-at="2025-05-13T00:39:43 IST" duration-ms="4946" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Fields_Empty_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:39:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Fields_Empty_Validation status=SUCCESS method=BankRegularizationSummary_TestClass.Mandatory_Fields_Empty_Validation()[pri:7, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.SummaryReports.BankRegularizationSummary_TestClass@25084a1e]" started-at="2025-05-13T00:39:43 IST" name="afterEachTest" finished-at="2025-05-13T00:39:45 IST" duration-ms="1236" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.SummaryReports.BankRegularizationSummary_TestClass -->
      <class name="Core.SummaryReports.BankAllocationSummary_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:29:37 IST" name="SetUp" finished-at="2025-05-13T00:29:37 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:29:37 IST" name="setupTest" finished-at="2025-05-13T00:29:37 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_zone_user_able_to_allocate_accounts_to_branch(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_zone_user_able_to_allocate_accounts_to_branch(java.util.Map)[pri:1, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:29:37 IST" name="Verify_zone_user_able_to_allocate_accounts_to_branch" data-provider="TestData" finished-at="2025-05-13T00:31:52 IST" duration-ms="135397" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_zone_user_able_to_allocate_accounts_to_branch -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:31:52 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:31:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_zone_user_able_to_allocate_accounts_to_branch status=SUCCESS method=BankAllocationSummary_TestClass.Verify_zone_user_able_to_allocate_accounts_to_branch(java.util.Map)[pri:1, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:31:52 IST" name="setupTest" finished-at="2025-05-13T00:31:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_branch_user_able_to_Login_with_Valid_Credentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_branch_user_able_to_Login_with_Valid_Credentials()[pri:2, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:31:52 IST" name="Verify_branch_user_able_to_Login_with_Valid_Credentials" finished-at="2025-05-13T00:32:57 IST" duration-ms="64809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_branch_user_able_to_Login_with_Valid_Credentials -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:32:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:32:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_branch_user_able_to_Login_with_Valid_Credentials status=SUCCESS method=BankAllocationSummary_TestClass.Verify_branch_user_able_to_Login_with_Valid_Credentials()[pri:2, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:32:57 IST" name="setupTest" finished-at="2025-05-13T00:32:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Successful_Account_Allocation_to_My_accounts_in_my_desk() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Successful_Account_Allocation_to_My_accounts_in_my_desk()[pri:3, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:32:57 IST" name="Successful_Account_Allocation_to_My_accounts_in_my_desk" finished-at="2025-05-13T00:33:22 IST" duration-ms="24960" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Successful_Account_Allocation_to_My_accounts_in_my_desk -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:33:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Successful_Account_Allocation_to_My_accounts_in_my_desk status=SUCCESS method=BankAllocationSummary_TestClass.Successful_Account_Allocation_to_My_accounts_in_my_desk()[pri:3, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:22 IST" name="setupTest" finished-at="2025-05-13T00:33:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Validate_Data_Execution_for_Bank_Allocation_Summary_in_database() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Data_Execution_for_Bank_Allocation_Summary_in_database()[pri:4, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:22 IST" name="Validate_Data_Execution_for_Bank_Allocation_Summary_in_database" finished-at="2025-05-13T00:33:25 IST" duration-ms="3481" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Data_Execution_for_Bank_Allocation_Summary_in_database -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:33:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Data_Execution_for_Bank_Allocation_Summary_in_database status=SUCCESS method=BankAllocationSummary_TestClass.Validate_Data_Execution_for_Bank_Allocation_Summary_in_database()[pri:4, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:25 IST" name="setupTest" finished-at="2025-05-13T00:33:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Accounts_in_Todays_Branch_Allocation_Summary(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Accounts_in_Todays_Branch_Allocation_Summary(java.util.Map)[pri:5, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:33:25 IST" name="Verify_Accounts_in_Todays_Branch_Allocation_Summary" data-provider="TestData" finished-at="2025-05-13T00:37:39 IST" duration-ms="253896" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of element located by By.xpath: //tr[@class='rz-datatable-even  ']//td[position()=1] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61279}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61279/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ec4c09453aa03a48804a9ed73937dd82]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.xpath: //tr[@class='rz-datatable-even  ']//td[position()=1] (tried for 180 second(s) with 500 milliseconds interval)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61279}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61279/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ec4c09453aa03a48804a9ed73937dd82
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:230)
at Core.SummaryReports.BankAllocationSummary_MainClass.areTodaysAllocationsDisplayed(BankAllocationSummary_MainClass.java:747)
at Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Accounts_in_Todays_Branch_Allocation_Summary(BankAllocationSummary_TestClass.java:227)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Accounts_in_Todays_Branch_Allocation_Summary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:37:39 IST" duration-ms="182" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Accounts_in_Todays_Branch_Allocation_Summary status=FAILURE method=BankAllocationSummary_TestClass.Verify_Accounts_in_Todays_Branch_Allocation_Summary(java.util.Map)[pri:5, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:39 IST" name="setupTest" finished-at="2025-05-13T00:37:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Accounts_in_Yesterdays_date(java.util.Map) throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Accounts_in_Yesterdays_date(java.util.Map)[pri:6, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:39 IST" name="Verify_Accounts_in_Yesterdays_date" data-provider="TestData" finished-at="2025-05-13T00:37:44 IST" duration-ms="4376" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Accounts_in_Yesterdays_date -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:37:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Accounts_in_Yesterdays_date status=SUCCESS method=BankAllocationSummary_TestClass.Verify_Accounts_in_Yesterdays_date(java.util.Map)[pri:6, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution()[pri:7, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:44 IST" name="Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution" finished-at="2025-05-13T00:37:47 IST" duration-ms="3537" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:44 IST" name="setupTest" finished-at="2025-05-13T00:37:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:37:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution status=SUCCESS method=BankAllocationSummary_TestClass.Verify_the_tables_DW_BRANCH_ALLOCATIONS_SUMMARY_and_DW_BRANCH_ALLOCATIONS_DASHBOARD_are_updated_after_the_package_execution()[pri:7, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:47 IST" name="setupTest" finished-at="2025-05-13T00:37:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Grid_Details_Accuracy(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Grid_Details_Accuracy(java.util.Map)[pri:8, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:47 IST" name="Verify_Grid_Details_Accuracy" data-provider="TestData" finished-at="2025-05-13T00:37:49 IST" duration-ms="1877" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Yesterday's's allocated accounts are not displayed correctly. expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Yesterday's's allocated accounts are not displayed correctly. expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Grid_Details_Accuracy(BankAllocationSummary_TestClass.java:304)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Grid_Details_Accuracy -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:37:49 IST" duration-ms="171" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Grid_Details_Accuracy status=FAILURE method=BankAllocationSummary_TestClass.Verify_Grid_Details_Accuracy(java.util.Map)[pri:8, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:49 IST" name="setupTest" finished-at="2025-05-13T00:37:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Core.SummaryReports.BankAllocationSummary_TestClass.Verify_Download_Functionality_as_Excel() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Download_Functionality_as_Excel()[pri:9, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:49 IST" name="Verify_Download_Functionality_as_Excel" finished-at="2025-05-13T00:37:58 IST" duration-ms="8648" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Download_Functionality_as_Excel -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:58 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:37:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Download_Functionality_as_Excel status=SUCCESS method=BankAllocationSummary_TestClass.Verify_Download_Functionality_as_Excel()[pri:9, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:Core.SummaryReports.BankAllocationSummary_TestClass@bd4dc25]" started-at="2025-05-13T00:37:58 IST" name="afterEachTest" finished-at="2025-05-13T00:38:02 IST" duration-ms="3937" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- Core.SummaryReports.BankAllocationSummary_TestClass -->
    </test> <!-- Core - Summary reports -->
    <test started-at="2025-05-13T00:39:45 IST" name="Collection agency - Agent account allocation" finished-at="2025-05-13T00:55:05 IST" duration-ms="920376">
      <class name="CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:39:45 IST" name="SetUp" finished-at="2025-05-13T00:40:45 IST" duration-ms="60765" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:40:45 IST" name="setupTest" finished-at="2025-05-13T00:40:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Login_to_core_application_and_navigate_to_agency_account_agency_menu() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_core_application_and_navigate_to_agency_account_agency_menu()[pri:1, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:40:45 IST" name="Login_to_core_application_and_navigate_to_agency_account_agency_menu" finished-at="2025-05-13T00:41:00 IST" duration-ms="15109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_core_application_and_navigate_to_agency_account_agency_menu -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:00 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:41:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_core_application_and_navigate_to_agency_account_agency_menu status=SUCCESS method=AgentAccountAllocation_TestClass.Login_to_core_application_and_navigate_to_agency_account_agency_menu()[pri:1, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today()[pri:2, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:00 IST" name="Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today" finished-at="2025-05-13T00:41:05 IST" duration-ms="4053" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:00 IST" name="setupTest" finished-at="2025-05-13T00:41:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today() throws java.lang.ClassNotFoundException,java.io.IOException,java.sql.SQLException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:41:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today status=SUCCESS method=AgentAccountAllocation_TestClass.Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today()[pri:2, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:05 IST" name="setupTest" finished-at="2025-05-13T00:41:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account(java.util.Map) throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account(java.util.Map)[pri:3, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:05 IST" name="Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account" data-provider="TestData" finished-at="2025-05-13T00:41:43 IST" duration-ms="38101" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:43 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:41:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account status=SUCCESS method=AgentAccountAllocation_TestClass.Verify_that_the_Excel_file_is_successfully_downloaded_and_contains_the_details_of_the_chosen_account(java.util.Map)[pri:3, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:43 IST" name="setupTest" finished-at="2025-05-13T00:41:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Allocating_accounts_to_collection_agency() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocating_accounts_to_collection_agency()[pri:4, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:43 IST" name="Allocating_accounts_to_collection_agency" finished-at="2025-05-13T00:41:55 IST" duration-ms="12406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocating_accounts_to_collection_agency -->
        <test-method signature="Login_to_allocated_collection_agency_from_collection_agency_application()[pri:5, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:55 IST" name="Login_to_allocated_collection_agency_from_collection_agency_application" finished-at="2025-05-13T00:52:49 IST" duration-ms="654241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_allocated_collection_agency_from_collection_agency_application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:41:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocating_accounts_to_collection_agency status=SUCCESS method=AgentAccountAllocation_TestClass.Allocating_accounts_to_collection_agency()[pri:4, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:41:55 IST" name="setupTest" finished-at="2025-05-13T00:41:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Login_to_allocated_collection_agency_from_collection_agency_application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:49 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:52:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_allocated_collection_agency_from_collection_agency_application status=SUCCESS method=AgentAccountAllocation_TestClass.Login_to_allocated_collection_agency_from_collection_agency_application()[pri:5, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:49 IST" name="setupTest" finished-at="2025-05-13T00:52:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.verify_agent_account_allocation_page_is_available() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="verify_agent_account_allocation_page_is_available()[pri:6, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:49 IST" name="verify_agent_account_allocation_page_is_available" finished-at="2025-05-13T00:52:54 IST" duration-ms="5081" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_agent_account_allocation_page_is_available -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:52:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_agent_account_allocation_page_is_available status=SUCCESS method=AgentAccountAllocation_TestClass.verify_agent_account_allocation_page_is_available()[pri:6, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:54 IST" name="setupTest" finished-at="2025-05-13T00:52:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Filter_Asset_Category(java.util.Map) throws java.lang.InterruptedException,java.lang.ClassNotFoundException,java.sql.SQLException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Filter_Asset_Category(java.util.Map)[pri:7, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:52:54 IST" name="Filter_Asset_Category" data-provider="TestData" finished-at="2025-05-13T00:53:13 IST" duration-ms="18680" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Filter_Asset_Category -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:53:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Filter_Asset_Category status=SUCCESS method=AgentAccountAllocation_TestClass.Filter_Asset_Category(java.util.Map)[pri:7, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:13 IST" name="setupTest" finished-at="2025-05-13T00:53:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Reset_Filters() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Reset_Filters()[pri:8, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:13 IST" name="Reset_Filters" finished-at="2025-05-13T00:53:22 IST" duration-ms="8900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reset_Filters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:53:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Reset_Filters status=SUCCESS method=AgentAccountAllocation_TestClass.Reset_Filters()[pri:8, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:22 IST" name="setupTest" finished-at="2025-05-13T00:53:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Allocate_Accounts(java.util.Map) throws java.lang.InterruptedException,java.lang.ClassNotFoundException,java.sql.SQLException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocate_Accounts(java.util.Map)[pri:9, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:22 IST" name="Allocate_Accounts" data-provider="TestData" finished-at="2025-05-13T00:53:55 IST" duration-ms="33333" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocate_Accounts -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:53:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocate_Accounts status=SUCCESS method=AgentAccountAllocation_TestClass.Allocate_Accounts(java.util.Map)[pri:9, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:55 IST" name="setupTest" finished-at="2025-05-13T00:53:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Verify_Allocated_Accounts(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Allocated_Accounts(java.util.Map)[pri:10, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:53:55 IST" name="Verify_Allocated_Accounts" data-provider="TestData" finished-at="2025-05-13T00:54:12 IST" duration-ms="16754" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Allocated_Accounts -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:12 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Allocated_Accounts status=SUCCESS method=AgentAccountAllocation_TestClass.Verify_Allocated_Accounts(java.util.Map)[pri:10, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:12 IST" name="setupTest" finished-at="2025-05-13T00:54:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Download_Grid_Data() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Grid_Data()[pri:11, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:12 IST" name="Download_Grid_Data" finished-at="2025-05-13T00:54:24 IST" duration-ms="11632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Grid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:24 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Grid_Data status=SUCCESS method=AgentAccountAllocation_TestClass.Download_Grid_Data()[pri:11, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Deallocate_Accounts()[pri:12, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:24 IST" name="Deallocate_Accounts" finished-at="2025-05-13T00:54:33 IST" duration-ms="9139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deallocate_Accounts -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:24 IST" name="setupTest" finished-at="2025-05-13T00:54:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Deallocate_Accounts() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:33 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deallocate_Accounts status=SUCCESS method=AgentAccountAllocation_TestClass.Deallocate_Accounts()[pri:12, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Open_Allocated_List_Popup()[pri:13, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:33 IST" name="Open_Allocated_List_Popup" finished-at="2025-05-13T00:54:37 IST" duration-ms="4016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Open_Allocated_List_Popup -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:33 IST" name="setupTest" finished-at="2025-05-13T00:54:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Open_Allocated_List_Popup() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:37 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Open_Allocated_List_Popup status=SUCCESS method=AgentAccountAllocation_TestClass.Open_Allocated_List_Popup()[pri:13, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:37 IST" name="setupTest" finished-at="2025-05-13T00:54:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Filter_Allocated_List_Action_Date(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Filter_Allocated_List_Action_Date(java.util.Map)[pri:14, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:37 IST" name="Filter_Allocated_List_Action_Date" data-provider="TestData" finished-at="2025-05-13T00:54:42 IST" duration-ms="4562" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Filter_Allocated_List_Action_Date -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Filter_Allocated_List_Action_Date status=SUCCESS method=AgentAccountAllocation_TestClass.Filter_Allocated_List_Action_Date(java.util.Map)[pri:14, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Reset_Allocated_List_Filters()[pri:15, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:42 IST" name="Reset_Allocated_List_Filters" finished-at="2025-05-13T00:54:45 IST" duration-ms="3308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reset_Allocated_List_Filters -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:42 IST" name="setupTest" finished-at="2025-05-13T00:54:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Reset_Allocated_List_Filters() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Reset_Allocated_List_Filters status=SUCCESS method=AgentAccountAllocation_TestClass.Reset_Allocated_List_Filters()[pri:15, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:45 IST" name="setupTest" finished-at="2025-05-13T00:54:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Download_Allocated_List_Data(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Allocated_List_Data(java.util.Map)[pri:16, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:45 IST" name="Download_Allocated_List_Data" data-provider="TestData" finished-at="2025-05-13T00:54:55 IST" duration-ms="10461" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AcountType=Allocated, DPDDays=10, DPDDaysOperator==, FromAndToDates=12, NPACategory=SUB-STANDARD, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CollectionAgencyAgentAcAllocatPage}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Allocated_List_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Allocated_List_Data status=SUCCESS method=AgentAccountAllocation_TestClass.Download_Allocated_List_Data(java.util.Map)[pri:16, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:55 IST" name="setupTest" finished-at="2025-05-13T00:54:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Close_Allocated_List_Popup() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Close_Allocated_List_Popup()[pri:17, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:55 IST" name="Close_Allocated_List_Popup" finished-at="2025-05-13T00:54:59 IST" duration-ms="3223" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Close_Allocated_List_Popup -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:54:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Close_Allocated_List_Popup status=SUCCESS method=AgentAccountAllocation_TestClass.Close_Allocated_List_Popup()[pri:17, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:59 IST" name="setupTest" finished-at="2025-05-13T00:54:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass.Close_Main_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Close_Main_Page()[pri:18, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:54:59 IST" name="Close_Main_Page" finished-at="2025-05-13T00:55:02 IST" duration-ms="3702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Close_Main_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:55:02 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T00:55:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Close_Main_Page status=SUCCESS method=AgentAccountAllocation_TestClass.Close_Main_Page()[pri:18, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass@169e6180]" started-at="2025-05-13T00:55:02 IST" name="afterEachTest" finished-at="2025-05-13T00:55:05 IST" duration-ms="2696" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- CollectionAgency.AccountAllocation.AgentAccountAllocation_TestClass -->
    </test> <!-- Collection agency - Agent account allocation -->
    <test started-at="2025-05-13T00:55:05 IST" name="Collection agency - Security management" finished-at="2025-05-13T01:09:09 IST" duration-ms="844165">
      <class name="com.CollectionAgency.SecurityManagement.RoleManagement_Test">
        <test-method is-config="true" signature="reference()[pri:0, instance:com.CollectionAgency.SecurityManagement.RoleManagement_Test@2ed2d9cb]" started-at="2025-05-13T00:55:05 IST" name="reference" finished-at="2025-05-13T00:55:05 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reference -->
        <test-method signature="RUNALL(java.util.Map,org.testng.ITestContext)[pri:0, instance:com.CollectionAgency.SecurityManagement.RoleManagement_Test@2ed2d9cb]" started-at="2025-05-13T00:55:05 IST" name="RUNALL" data-provider="TestData" finished-at="2025-05-13T01:09:09 IST" duration-ms="844113" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AlphanumericName=Role25, Role Name=diyan10, Run=Yes, specialCharacters=^%$, TestScenario=TC_ProcessSheet_CollectionAgency}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@5512d6f9]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" b-6ygjmjrcet="">...</button> is not clickable at point (1228, 27). Other element would receive the click: <div class="rz-dialog-mask" style="z-index: 1000;"></div>
  (Session info: chrome=136.0.7103.93)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [162b2101f70c5d3a57b7f92a3a0ed61f, clickElement {id=f.BBB2D54E6991E6A00695BAEAFF6C3D6C.d.99609BABB2CEAB038EE06271572C9ED9.e.425}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61499}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61499/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (162b2101f70c5d3a57b7f92a3a0ed61f)] -> xpath: //button[@class='btn dropdown-toggle']]
Session ID: 162b2101f70c5d3a57b7f92a3a0ed61f]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" b-6ygjmjrcet="">...</button> is not clickable at point (1228, 27). Other element would receive the click: <div class="rz-dialog-mask" style="z-index: 1000;"></div>
  (Session info: chrome=136.0.7103.93)
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [162b2101f70c5d3a57b7f92a3a0ed61f, clickElement {id=f.BBB2D54E6991E6A00695BAEAFF6C3D6C.d.99609BABB2CEAB038EE06271572C9ED9.e.425}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61499}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61499/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (162b2101f70c5d3a57b7f92a3a0ed61f)] -> xpath: //button[@class='btn dropdown-toggle']]
Session ID: 162b2101f70c5d3a57b7f92a3a0ed61f
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:224)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:77)
at com.BasePackage.Base_Class.click(Base_Class.java:134)
at com.CollectionAgency.SecurityManagement.RoleManagement_Test.RUNALL(RoleManagement_Test.java:251)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RUNALL -->
      </class> <!-- com.CollectionAgency.SecurityManagement.RoleManagement_Test -->
    </test> <!-- Collection agency - Security management -->
    <test started-at="2025-05-13T01:09:09 IST" name="Collection agency - Agent management" finished-at="2025-05-13T05:12:32 IST" duration-ms="14603183">
      <class name="com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:09:09 IST" name="SetUp" finished-at="2025-05-13T01:09:58 IST" duration-ms="48559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method signature="Verify_AgentList_Navigation(org.testng.ITestContext)[pri:1, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:09:58 IST" name="Verify_AgentList_Navigation" finished-at="2025-05-13T01:10:22 IST" duration-ms="24590" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_AgentList_Navigation -->
        <test-method is-config="true" signature="reference()[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:09:58 IST" name="reference" finished-at="2025-05-13T01:09:58 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reference -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:09:58 IST" name="setupTest" finished-at="2025-05-13T01:09:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_AgentList_Navigation(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:10:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_AgentList_Navigation status=SUCCESS method=AddNewAgentAndAgentList.Verify_AgentList_Navigation(org.testng.ITestContext)[pri:1, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:22 IST" name="setupTest" finished-at="2025-05-13T01:10:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Fields_Buttons_AgentListPage(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_Buttons_AgentListPage(org.testng.ITestContext)[pri:2, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:22 IST" name="Verify_Fields_Buttons_AgentListPage" finished-at="2025-05-13T01:10:31 IST" duration-ms="8522" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_Buttons_AgentListPage -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:10:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_Buttons_AgentListPage status=SUCCESS method=AddNewAgentAndAgentList.Verify_Fields_Buttons_AgentListPage(org.testng.ITestContext)[pri:2, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:31 IST" name="setupTest" finished-at="2025-05-13T01:10:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_AddNewAgent_Navigation(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_AddNewAgent_Navigation(org.testng.ITestContext)[pri:3, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:10:31 IST" name="Verify_AddNewAgent_Navigation" finished-at="2025-05-13T01:11:09 IST" duration-ms="38116" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_AddNewAgent_Navigation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:11:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_AddNewAgent_Navigation status=SUCCESS method=AddNewAgentAndAgentList.Verify_AddNewAgent_Navigation(org.testng.ITestContext)[pri:3, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="setupTest" finished-at="2025-05-13T01:11:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Fields_Buttons_AddNewAgentPage(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_Buttons_AddNewAgentPage(org.testng.ITestContext)[pri:4, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="Verify_Fields_Buttons_AddNewAgentPage" finished-at="2025-05-13T01:11:09 IST" duration-ms="182" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_Buttons_AddNewAgentPage -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:11:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_Buttons_AddNewAgentPage status=SUCCESS method=AddNewAgentAndAgentList.Verify_Fields_Buttons_AddNewAgentPage(org.testng.ITestContext)[pri:4, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_DateOfJoining_Pageload(org.testng.ITestContext)[pri:5, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="Verify_DateOfJoining_Pageload" finished-at="2025-05-13T01:11:14 IST" duration-ms="5063" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_DateOfJoining_Pageload -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:09 IST" name="setupTest" finished-at="2025-05-13T01:11:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_DateOfJoining_Pageload(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:14 IST" name="setupTest" finished-at="2025-05-13T01:11:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_AddNewAgent_CloseButton(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_AddNewAgent_CloseButton(org.testng.ITestContext)[pri:6, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:14 IST" name="Verify_AddNewAgent_CloseButton" finished-at="2025-05-13T01:11:22 IST" duration-ms="8220" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_AddNewAgent_CloseButton -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:14 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:11:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_DateOfJoining_Pageload status=SUCCESS method=AddNewAgentAndAgentList.Verify_DateOfJoining_Pageload(org.testng.ITestContext)[pri:5, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:11:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_AddNewAgent_CloseButton status=SUCCESS method=AddNewAgentAndAgentList.Verify_AddNewAgent_CloseButton(org.testng.ITestContext)[pri:6, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Submit_AddNewAgent_WithoutMandatoryFields(org.testng.ITestContext)[pri:7, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:22 IST" name="Verify_Submit_AddNewAgent_WithoutMandatoryFields" finished-at="2025-05-13T01:12:01 IST" duration-ms="38179" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Submit_AddNewAgent_WithoutMandatoryFields -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:11:22 IST" name="setupTest" finished-at="2025-05-13T01:11:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_AddNewAgent_WithoutMandatoryFields(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:01 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:12:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Submit_AddNewAgent_WithoutMandatoryFields status=SUCCESS method=AddNewAgentAndAgentList.Verify_Submit_AddNewAgent_WithoutMandatoryFields(org.testng.ITestContext)[pri:7, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_InvalidPhoneNumber_Format(org.testng.ITestContext)[pri:8, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:01 IST" name="Verify_InvalidPhoneNumber_Format" finished-at="2025-05-13T01:12:02 IST" duration-ms="1035" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_InvalidPhoneNumber_Format -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:01 IST" name="setupTest" finished-at="2025-05-13T01:12:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_InvalidPhoneNumber_Format(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:02 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:12:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_InvalidPhoneNumber_Format status=SUCCESS method=AddNewAgentAndAgentList.Verify_InvalidPhoneNumber_Format(org.testng.ITestContext)[pri:8, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:02 IST" name="setupTest" finished-at="2025-05-13T01:12:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Submit_ValidNewAgentDetails(org.testng.ITestContext)[pri:9, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:12:02 IST" name="Verify_Submit_ValidNewAgentDetails" finished-at="2025-05-13T01:22:44 IST" duration-ms="641907" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'User created successfully . Preset password for the user:')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'User created successfully . Preset password for the user:')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'User created successfully . Preset password for the user:')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'User created successfully . Preset password for the user:')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.isUserCreatedSuccessfully(AddNewAgentAndAgentList_MainClass.java:558)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails(AddNewAgentAndAgentList.java:269)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Submit_ValidNewAgentDetails -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:22:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:22:44 IST" duration-ms="151" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Submit_ValidNewAgentDetails status=FAILURE method=AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails(org.testng.ITestContext)[pri:9, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Submit_ValidNewAgentDetails_ExistingAgentCode(org.testng.ITestContext)[pri:10, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:22:44 IST" name="Verify_Submit_ValidNewAgentDetails_ExistingAgentCode" finished-at="2025-05-13T01:23:10 IST" duration-ms="26418" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.Fillthedetails10(AddNewAgentAndAgentList_MainClass.java:866)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails_ExistingAgentCode(AddNewAgentAndAgentList.java:293)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Submit_ValidNewAgentDetails_ExistingAgentCode -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:22:44 IST" name="setupTest" finished-at="2025-05-13T01:22:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails_ExistingAgentCode(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:23:10 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:23:10 IST" duration-ms="272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Submit_ValidNewAgentDetails_ExistingAgentCode status=FAILURE method=AddNewAgentAndAgentList.Verify_Submit_ValidNewAgentDetails_ExistingAgentCode(org.testng.ITestContext)[pri:10, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:23:10 IST" name="setupTest" finished-at="2025-05-13T01:23:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_PastDateOfJoining(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Submit_PastDateOfJoining(org.testng.ITestContext)[pri:17, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:23:10 IST" name="Verify_Submit_PastDateOfJoining" finished-at="2025-05-13T01:44:27 IST" duration-ms="1276380" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.ClearAddNewAgent(AddNewAgentAndAgentList_MainClass.java:429)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_PastDateOfJoining(AddNewAgentAndAgentList.java:321)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Submit_PastDateOfJoining -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:44:27 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T01:44:27 IST" duration-ms="269" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Submit_PastDateOfJoining status=FAILURE method=AddNewAgentAndAgentList.Verify_Submit_PastDateOfJoining(org.testng.ITestContext)[pri:17, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:44:27 IST" name="setupTest" finished-at="2025-05-13T01:44:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_FutureDateOfJoining(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Submit_FutureDateOfJoining(org.testng.ITestContext)[pri:18, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T01:44:27 IST" name="Verify_Submit_FutureDateOfJoining" finished-at="2025-05-13T02:05:39 IST" duration-ms="1272480" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@name='Name']"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[@name='Name']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.ClearAddNewAgent(AddNewAgentAndAgentList_MainClass.java:429)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Submit_FutureDateOfJoining(AddNewAgentAndAgentList.java:348)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Submit_FutureDateOfJoining -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:05:39 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T02:05:40 IST" duration-ms="260" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Submit_FutureDateOfJoining status=FAILURE method=AddNewAgentAndAgentList.Verify_Submit_FutureDateOfJoining(org.testng.ITestContext)[pri:18, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_SearchAgent_ValidUsername(org.testng.ITestContext)[pri:19, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:05:40 IST" name="Verify_SearchAgent_ValidUsername" finished-at="2025-05-13T02:36:56 IST" duration-ms="1876587" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_SearchAgent_ValidUsername -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:05:40 IST" name="setupTest" finished-at="2025-05-13T02:05:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_SearchAgent_ValidUsername(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:36:56 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T02:36:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_SearchAgent_ValidUsername status=SUCCESS method=AddNewAgentAndAgentList.Verify_SearchAgent_ValidUsername(org.testng.ITestContext)[pri:19, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:36:56 IST" name="setupTest" finished-at="2025-05-13T02:36:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_SearchAgent_InvalidUsername(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_SearchAgent_InvalidUsername(org.testng.ITestContext)[pri:20, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T02:36:56 IST" name="Verify_SearchAgent_InvalidUsername" finished-at="2025-05-13T03:08:09 IST" duration-ms="1872437" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'No records to display.')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'No records to display.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'No records to display.')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'No records to display.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.IsNoRecordToDisplay(AddNewAgentAndAgentList_MainClass.java:586)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_SearchAgent_InvalidUsername(AddNewAgentAndAgentList.java:404)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_SearchAgent_InvalidUsername -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:08:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T03:08:09 IST" duration-ms="285" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_SearchAgent_InvalidUsername status=FAILURE method=AddNewAgentAndAgentList.Verify_SearchAgent_InvalidUsername(org.testng.ITestContext)[pri:20, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:08:09 IST" name="setupTest" finished-at="2025-05-13T03:08:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ToggleAgent_ActiveToDeactive(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_ToggleAgent_ActiveToDeactive(org.testng.ITestContext)[pri:21, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:08:09 IST" name="Verify_ToggleAgent_ActiveToDeactive" finished-at="2025-05-13T03:29:17 IST" duration-ms="1268363" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"(//*//input[@type='search'])[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=(//*//input[@type='search'])[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"(//*//input[@type='search'])[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=(//*//input[@type='search'])[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.SearchUser(AddNewAgentAndAgentList_MainClass.java:808)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ToggleAgent_ActiveToDeactive(AddNewAgentAndAgentList.java:427)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_ToggleAgent_ActiveToDeactive -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:17 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T03:29:18 IST" duration-ms="277" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_ToggleAgent_ActiveToDeactive status=FAILURE method=AddNewAgentAndAgentList.Verify_ToggleAgent_ActiveToDeactive(org.testng.ITestContext)[pri:21, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:18 IST" name="setupTest" finished-at="2025-05-13T03:29:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_SearchConfirm_UserDeactivated(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_SearchConfirm_UserDeactivated(org.testng.ITestContext)[pri:22, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:18 IST" name="Verify_SearchConfirm_UserDeactivated" finished-at="2025-05-13T03:29:22 IST" duration-ms="4023" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"(//*//input[@type='search'])[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=(//*//input[@type='search'])[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"(//*//input[@type='search'])[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=(//*//input[@type='search'])[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.SearchUserWithIsActive(AddNewAgentAndAgentList_MainClass.java:817)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_SearchConfirm_UserDeactivated(AddNewAgentAndAgentList.java:451)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_SearchConfirm_UserDeactivated -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T03:29:22 IST" duration-ms="253" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_SearchConfirm_UserDeactivated status=FAILURE method=AddNewAgentAndAgentList.Verify_SearchConfirm_UserDeactivated(org.testng.ITestContext)[pri:22, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:22 IST" name="setupTest" finished-at="2025-05-13T03:29:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ToggleAgent_InactiveToActive(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_ToggleAgent_InactiveToActive(org.testng.ITestContext)[pri:23, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:29:22 IST" name="Verify_ToggleAgent_InactiveToActive" finished-at="2025-05-13T03:49:22 IST" duration-ms="1200047" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Status Changed')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Status Changed')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Status Changed')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Status Changed')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.SatusChanged(AddNewAgentAndAgentList_MainClass.java:828)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ToggleAgent_InactiveToActive(AddNewAgentAndAgentList.java:473)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_ToggleAgent_InactiveToActive -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:49:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T03:49:22 IST" duration-ms="277" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_ToggleAgent_InactiveToActive status=FAILURE method=AddNewAgentAndAgentList.Verify_ToggleAgent_InactiveToActive(org.testng.ITestContext)[pri:23, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_ResetPassword_Functionality(org.testng.ITestContext)[pri:30, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:49:22 IST" name="Verify_ResetPassword_Functionality" finished-at="2025-05-13T04:20:45 IST" duration-ms="1882438" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[text()='Role']/..//div"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[text()='Role']/..//div}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[text()='Role']/..//div"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[text()='Role']/..//div}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.creatNewAgent(AddNewAgentAndAgentList_MainClass.java:772)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ResetPassword_Functionality(AddNewAgentAndAgentList.java:497)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_ResetPassword_Functionality -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T03:49:22 IST" name="setupTest" finished-at="2025-05-13T03:49:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_ResetPassword_Functionality(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:20:45 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T04:20:45 IST" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_ResetPassword_Functionality status=FAILURE method=AddNewAgentAndAgentList.Verify_ResetPassword_Functionality(org.testng.ITestContext)[pri:30, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:20:45 IST" name="setupTest" finished-at="2025-05-13T04:20:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Fields_Buttons_EditOption_AgentListPage(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_Buttons_EditOption_AgentListPage(org.testng.ITestContext)[pri:31, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:20:45 IST" name="Verify_Fields_Buttons_EditOption_AgentListPage" finished-at="2025-05-13T04:41:21 IST" duration-ms="1236217" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Edit Agent')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Edit Agent')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Edit Agent')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Edit Agent')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.EditAgentVerification(AddNewAgentAndAgentList_MainClass.java:676)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Fields_Buttons_EditOption_AgentListPage(AddNewAgentAndAgentList.java:529)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_Buttons_EditOption_AgentListPage -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:41:21 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T04:41:22 IST" duration-ms="261" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_Buttons_EditOption_AgentListPage status=FAILURE method=AddNewAgentAndAgentList.Verify_Fields_Buttons_EditOption_AgentListPage(org.testng.ITestContext)[pri:31, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:41:22 IST" name="setupTest" finished-at="2025-05-13T04:41:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_EditAgentName_Submit(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_EditAgentName_Submit(org.testng.ITestContext)[pri:32, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:41:22 IST" name="Verify_EditAgentName_Submit" finished-at="2025-05-13T04:51:22 IST" duration-ms="600532" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Record Updated Successfully')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Record Updated Successfully')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[contains(text(),'Record Updated Successfully')]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//*[contains(text(),'Record Updated Successfully')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.isUserUpdated(AddNewAgentAndAgentList_MainClass.java:569)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_EditAgentName_Submit(AddNewAgentAndAgentList.java:553)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_EditAgentName_Submit -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:51:22 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T04:51:22 IST" duration-ms="265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_EditAgentName_Submit status=FAILURE method=AddNewAgentAndAgentList.Verify_EditAgentName_Submit(org.testng.ITestContext)[pri:32, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:51:22 IST" name="setupTest" finished-at="2025-05-13T04:51:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Checking_EditedUserDetails(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Checking_EditedUserDetails(org.testng.ITestContext)[pri:33, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T04:51:22 IST" name="Verify_Checking_EditedUserDetails" finished-at="2025-05-13T05:12:31 IST" duration-ms="1268367" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@b2d99a]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//table/tbody/tr[1]/td[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//table/tbody/tr[1]/td[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//table/tbody/tr[1]/td[3]"}
  (Session info: chrome=136.0.7103.93)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.14'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [679230b5d647c86778a25ffc2996ce56, findElement {using=xpath, value=//table/tbody/tr[1]/td[3]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 136.0.7103.93, chrome: {chromedriverVersion: 136.0.7103.92 (cb81a4cc5087..., userDataDir: C:\Windows\SystemTemp\scope...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:61553}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:61553/devtoo..., se:cdpVersion: 136.0.7103.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 679230b5d647c86778a25ffc2996ce56
at jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList_MainClass.verifyUpdatedUser(AddNewAgentAndAgentList_MainClass.java:665)
at com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList.Verify_Checking_EditedUserDetails(AddNewAgentAndAgentList.java:578)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Checking_EditedUserDetails -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T05:12:31 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:12:31 IST" duration-ms="268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Checking_EditedUserDetails status=FAILURE method=AddNewAgentAndAgentList.Verify_Checking_EditedUserDetails(org.testng.ITestContext)[pri:33, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList@6404f418]" started-at="2025-05-13T05:12:31 IST" name="afterclass" finished-at="2025-05-13T05:12:32 IST" duration-ms="1365" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- com.CollectionAgency.AgentManagement.AddNewAgentAndAgentList -->
    </test> <!-- Collection agency - Agent management -->
    <test started-at="2025-05-13T05:12:32 IST" name="Collection agency - Collection agency" finished-at="2025-05-13T05:16:56 IST" duration-ms="263914">
      <class name="CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:12:32 IST" name="SetUp" finished-at="2025-05-13T05:13:36 IST" duration-ms="63777" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:36 IST" name="setupTest" finished-at="2025-05-13T05:13:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Login_to_core_application_and_navigate_to_agency_account_agency_menu() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_core_application_and_navigate_to_agency_account_agency_menu()[pri:1, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:36 IST" name="Login_to_core_application_and_navigate_to_agency_account_agency_menu" finished-at="2025-05-13T05:13:51 IST" duration-ms="14863" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_core_application_and_navigate_to_agency_account_agency_menu -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:51 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:13:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_core_application_and_navigate_to_agency_account_agency_menu status=SUCCESS method=CollectionAgencyDisposition_TestClass.Login_to_core_application_and_navigate_to_agency_account_agency_menu()[pri:1, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today()[pri:2, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:51 IST" name="Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today" finished-at="2025-05-13T05:13:55 IST" duration-ms="4034" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:51 IST" name="setupTest" finished-at="2025-05-13T05:13:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today() throws java.lang.ClassNotFoundException,java.io.IOException,java.sql.SQLException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:55 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:13:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today status=SUCCESS method=CollectionAgencyDisposition_TestClass.Truncate_mst_col_agency_acc_allocated_and_delete_data_from_trn_account_followup_where_disposition_date__today()[pri:2, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:55 IST" name="setupTest" finished-at="2025-05-13T05:13:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Allocating_accounts_to_collection_agency(java.util.Map) throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocating_accounts_to_collection_agency(java.util.Map)[pri:3, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:13:55 IST" name="Allocating_accounts_to_collection_agency" data-provider="TestData" finished-at="2025-05-13T05:14:44 IST" duration-ms="48416" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocating_accounts_to_collection_agency -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:44 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:14:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocating_accounts_to_collection_agency status=SUCCESS method=CollectionAgencyDisposition_TestClass.Allocating_accounts_to_collection_agency(java.util.Map)[pri:3, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:44 IST" name="setupTest" finished-at="2025-05-13T05:14:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Fetch_a_not_allocated_account_number_in_selected_collection_agency() throws java.io.IOException,java.lang.InterruptedException,java.lang.ClassNotFoundException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Fetch_a_not_allocated_account_number_in_selected_collection_agency()[pri:4, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:44 IST" name="Fetch_a_not_allocated_account_number_in_selected_collection_agency" finished-at="2025-05-13T05:14:47 IST" duration-ms="3574" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Fetch_a_not_allocated_account_number_in_selected_collection_agency -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:47 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:14:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Fetch_a_not_allocated_account_number_in_selected_collection_agency status=SUCCESS method=CollectionAgencyDisposition_TestClass.Fetch_a_not_allocated_account_number_in_selected_collection_agency()[pri:4, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Login_to_allocated_collection_agency_from_collection_agency_application()[pri:5, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:47 IST" name="Login_to_allocated_collection_agency_from_collection_agency_application" finished-at="2025-05-13T05:15:40 IST" duration-ms="53167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_allocated_collection_agency_from_collection_agency_application -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:14:47 IST" name="setupTest" finished-at="2025-05-13T05:14:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Login_to_allocated_collection_agency_from_collection_agency_application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:15:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_allocated_collection_agency_from_collection_agency_application status=SUCCESS method=CollectionAgencyDisposition_TestClass.Login_to_allocated_collection_agency_from_collection_agency_application()[pri:5, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Doing_Disposition_against_Agency_allocated_accounts()[pri:6, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:40 IST" name="Doing_Disposition_against_Agency_allocated_accounts" finished-at="2025-05-13T05:15:54 IST" duration-ms="13428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Doing_Disposition_against_Agency_allocated_accounts -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:40 IST" name="setupTest" finished-at="2025-05-13T05:15:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Doing_Disposition_against_Agency_allocated_accounts() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:15:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Doing_Disposition_against_Agency_allocated_accounts status=SUCCESS method=CollectionAgencyDisposition_TestClass.Doing_Disposition_against_Agency_allocated_accounts()[pri:6, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:54 IST" name="setupTest" finished-at="2025-05-13T05:15:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Customer_Details_Grid_Data_Integrity() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Customer_Details_Grid_Data_Integrity()[pri:7, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:54 IST" name="Customer_Details_Grid_Data_Integrity" finished-at="2025-05-13T05:15:57 IST" duration-ms="3248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Customer_Details_Grid_Data_Integrity -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:57 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:15:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Customer_Details_Grid_Data_Integrity status=SUCCESS method=CollectionAgencyDisposition_TestClass.Customer_Details_Grid_Data_Integrity()[pri:7, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:57 IST" name="setupTest" finished-at="2025-05-13T05:15:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Risk_Column_Data_Consistency() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Risk_Column_Data_Consistency()[pri:8, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:15:57 IST" name="Risk_Column_Data_Consistency" finished-at="2025-05-13T05:16:00 IST" duration-ms="3035" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Risk_Column_Data_Consistency -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:00 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Risk_Column_Data_Consistency status=SUCCESS method=CollectionAgencyDisposition_TestClass.Risk_Column_Data_Consistency()[pri:8, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:00 IST" name="setupTest" finished-at="2025-05-13T05:16:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Security_Details_View_Open_Grid() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Security_Details_View_Open_Grid()[pri:9, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:00 IST" name="Security_Details_View_Open_Grid" finished-at="2025-05-13T05:16:04 IST" duration-ms="4230" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Security_Details_View_Open_Grid -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:04 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Security_Details_View_Open_Grid status=SUCCESS method=CollectionAgencyDisposition_TestClass.Security_Details_View_Open_Grid()[pri:9, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:04 IST" name="setupTest" finished-at="2025-05-13T05:16:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Next_Action_Owner_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Next_Action_Owner_Dropdown_Selection(java.util.Map)[pri:10, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:04 IST" name="Next_Action_Owner_Dropdown_Selection" data-provider="TestData" finished-at="2025-05-13T05:16:08 IST" duration-ms="3335" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Next_Action_Owner_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:08 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Next_Action_Owner_Dropdown_Selection status=SUCCESS method=CollectionAgencyDisposition_TestClass.Next_Action_Owner_Dropdown_Selection(java.util.Map)[pri:10, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Cancel_Button_Functionality_in_Add_New_Interaction_Details(java.util.Map)[pri:11, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:08 IST" name="Cancel_Button_Functionality_in_Add_New_Interaction_Details" data-provider="TestData" finished-at="2025-05-13T05:16:13 IST" duration-ms="4954" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Cancel_Button_Functionality_in_Add_New_Interaction_Details -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:08 IST" name="setupTest" finished-at="2025-05-13T05:16:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Cancel_Button_Functionality_in_Add_New_Interaction_Details(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:13 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Cancel_Button_Functionality_in_Add_New_Interaction_Details status=SUCCESS method=CollectionAgencyDisposition_TestClass.Cancel_Button_Functionality_in_Add_New_Interaction_Details(java.util.Map)[pri:11, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:13 IST" name="setupTest" finished-at="2025-05-13T05:16:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Error_Guessing_Empty_Remarks_Field(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Error_Guessing_Empty_Remarks_Field(java.util.Map)[pri:12, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:13 IST" name="Error_Guessing_Empty_Remarks_Field" data-provider="TestData" finished-at="2025-05-13T05:16:19 IST" duration-ms="6066" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Error_Guessing_Empty_Remarks_Field -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Error_Guessing_Empty_Remarks_Field status=SUCCESS method=CollectionAgencyDisposition_TestClass.Error_Guessing_Empty_Remarks_Field(java.util.Map)[pri:12, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Committed_Amount_Field_BVA_Validations(java.util.Map)[pri:13, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:19 IST" name="Committed_Amount_Field_BVA_Validations" data-provider="TestData" finished-at="2025-05-13T05:16:23 IST" duration-ms="4549" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Committed_Amount_Field_BVA_Validations -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:19 IST" name="setupTest" finished-at="2025-05-13T05:16:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Committed_Amount_Field_BVA_Validations(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:23 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Committed_Amount_Field_BVA_Validations status=SUCCESS method=CollectionAgencyDisposition_TestClass.Committed_Amount_Field_BVA_Validations(java.util.Map)[pri:13, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:23 IST" name="setupTest" finished-at="2025-05-13T05:16:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Customer_Details_Data_Accuracy() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Customer_Details_Data_Accuracy()[pri:14, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:23 IST" name="Customer_Details_Data_Accuracy" finished-at="2025-05-13T05:16:32 IST" duration-ms="8387" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Customer_Details_Data_Accuracy -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:32 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Customer_Details_Data_Accuracy status=SUCCESS method=CollectionAgencyDisposition_TestClass.Customer_Details_Data_Accuracy()[pri:14, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:32 IST" name="setupTest" finished-at="2025-05-13T05:16:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Other_Account_Details_Grid_Validation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Other_Account_Details_Grid_Validation()[pri:15, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:32 IST" name="Other_Account_Details_Grid_Validation" finished-at="2025-05-13T05:16:40 IST" duration-ms="8203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Other_Account_Details_Grid_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:40 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Other_Account_Details_Grid_Validation status=SUCCESS method=CollectionAgencyDisposition_TestClass.Other_Account_Details_Grid_Validation()[pri:15, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:40 IST" name="setupTest" finished-at="2025-05-13T05:16:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Disposition_and_Sub_Disposition_Valid_Selections(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Disposition_and_Sub_Disposition_Valid_Selections(java.util.Map)[pri:16, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:40 IST" name="Disposition_and_Sub_Disposition_Valid_Selections" data-provider="TestData" finished-at="2025-05-13T05:16:50 IST" duration-ms="9798" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AccountType=Not Allocated, AllocateTo=Call Centre, CommittedAmount=1000000000, Disposition=Meeting, DPDDays=10, DPDDaysOperator==, NextActionDate=13, NextActionOwner=Collection Agency, NPACategory=SUB-STANDARD, OutstandingBalance=25000, OutstandingBalanceOperator==, Region=Mumbai I, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SMACategory=SMA 0 (01-30 Days), SubDisposition=Not able to pay, TestScenario=CollectionAgencyDispositionPage, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Disposition_and_Sub_Disposition_Valid_Selections -->
        <test-method signature="Search_Functionality_Invalid_Input()[pri:17, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:50 IST" name="Search_Functionality_Invalid_Input" finished-at="2025-05-13T05:16:54 IST" duration-ms="4340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Functionality_Invalid_Input -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:50 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Disposition_and_Sub_Disposition_Valid_Selections status=SUCCESS method=CollectionAgencyDisposition_TestClass.Disposition_and_Sub_Disposition_Valid_Selections(java.util.Map)[pri:16, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:50 IST" name="setupTest" finished-at="2025-05-13T05:16:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass.Search_Functionality_Invalid_Input() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:54 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:16:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Functionality_Invalid_Input status=SUCCESS method=CollectionAgencyDisposition_TestClass.Search_Functionality_Invalid_Input()[pri:17, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass@61001b64]" started-at="2025-05-13T05:16:54 IST" name="afterEachTest" finished-at="2025-05-13T05:16:56 IST" duration-ms="2252" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- CollectionAgency.Disposition.CollectionAgencyDisposition_TestClass -->
    </test> <!-- Collection agency - Collection agency -->
    <test started-at="2025-05-13T05:16:56 IST" name="Call centre - Security management" finished-at="2025-05-13T05:21:00 IST" duration-ms="243950">
      <class name="CallCentre.SecurityManagement.RoleManagement_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:16:56 IST" name="SetUp" finished-at="2025-05-13T05:17:48 IST" duration-ms="51569" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="reference()[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="reference" finished-at="2025-05-13T05:17:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reference -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="setupTest" finished-at="2025-05-13T05:17:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Login_to_Beacon_FCM_call_centre_application(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_Beacon_FCM_call_centre_application(org.testng.ITestContext)[pri:1, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="Login_to_Beacon_FCM_call_centre_application" finished-at="2025-05-13T05:17:48 IST" duration-ms="25" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_Beacon_FCM_call_centre_application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:17:48 IST" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_Beacon_FCM_call_centre_application status=SUCCESS method=RoleManagement_TestClass.Login_to_Beacon_FCM_call_centre_application(org.testng.ITestContext)[pri:1, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="setupTest" finished-at="2025-05-13T05:17:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Navigation_to_Role_Management(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Navigation_to_Role_Management(org.testng.ITestContext)[pri:2, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:17:48 IST" name="Navigation_to_Role_Management" finished-at="2025-05-13T05:18:02 IST" duration-ms="14414" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Navigation_to_Role_Management -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:02 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:18:02 IST" duration-ms="66" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Navigation_to_Role_Management status=SUCCESS method=RoleManagement_TestClass.Navigation_to_Role_Management(org.testng.ITestContext)[pri:2, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:02 IST" name="setupTest" finished-at="2025-05-13T05:18:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Verify_Role_Management_Fields_and_Buttons(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Role_Management_Fields_and_Buttons(org.testng.ITestContext)[pri:3, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:02 IST" name="Verify_Role_Management_Fields_and_Buttons" finished-at="2025-05-13T05:18:03 IST" duration-ms="89" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Role_Management_Fields_and_Buttons -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:03 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:18:03 IST" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Role_Management_Fields_and_Buttons status=SUCCESS method=RoleManagement_TestClass.Verify_Role_Management_Fields_and_Buttons(org.testng.ITestContext)[pri:3, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Add_New_Role_Open_Permission_Popup(org.testng.ITestContext)[pri:4, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:03 IST" name="Add_New_Role_Open_Permission_Popup" finished-at="2025-05-13T05:18:19 IST" duration-ms="16541" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_New_Role_Open_Permission_Popup -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:03 IST" name="setupTest" finished-at="2025-05-13T05:18:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Add_New_Role_Open_Permission_Popup(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:19 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:18:19 IST" duration-ms="64" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_New_Role_Open_Permission_Popup status=SUCCESS method=RoleManagement_TestClass.Add_New_Role_Open_Permission_Popup(org.testng.ITestContext)[pri:4, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Save_Role_Without_Name(org.testng.ITestContext)[pri:5, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:19 IST" name="Save_Role_Without_Name" finished-at="2025-05-13T05:18:20 IST" duration-ms="359" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Save_Role_Without_Name -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:19 IST" name="setupTest" finished-at="2025-05-13T05:18:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Save_Role_Without_Name(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:20 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:18:20 IST" duration-ms="64" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Save_Role_Without_Name status=SUCCESS method=RoleManagement_TestClass.Save_Role_Without_Name(org.testng.ITestContext)[pri:5, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:20 IST" name="setupTest" finished-at="2025-05-13T05:18:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Cancel_New_Role_Addition(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Cancel_New_Role_Addition(org.testng.ITestContext)[pri:6, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:20 IST" name="Cancel_New_Role_Addition" finished-at="2025-05-13T05:18:36 IST" duration-ms="16175" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Cancel_New_Role_Addition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:36 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:18:36 IST" duration-ms="85" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Cancel_New_Role_Addition status=SUCCESS method=RoleManagement_TestClass.Cancel_New_Role_Addition(org.testng.ITestContext)[pri:6, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:36 IST" name="setupTest" finished-at="2025-05-13T05:18:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Add_Role_with_Valid_Data(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Add_Role_with_Valid_Data(org.testng.ITestContext)[pri:7, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:18:36 IST" name="Add_Role_with_Valid_Data" finished-at="2025-05-13T05:19:09 IST" duration-ms="33085" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Add_Role_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:09 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:19:09 IST" duration-ms="95" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Add_Role_with_Valid_Data status=SUCCESS method=RoleManagement_TestClass.Add_Role_with_Valid_Data(org.testng.ITestContext)[pri:7, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:09 IST" name="setupTest" finished-at="2025-05-13T05:19:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Search_for_Existing_Role(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_for_Existing_Role(org.testng.ITestContext)[pri:8, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:09 IST" name="Search_for_Existing_Role" finished-at="2025-05-13T05:19:25 IST" duration-ms="16288" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_for_Existing_Role -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:25 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:19:25 IST" duration-ms="75" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_for_Existing_Role status=SUCCESS method=RoleManagement_TestClass.Search_for_Existing_Role(org.testng.ITestContext)[pri:8, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:25 IST" name="setupTest" finished-at="2025-05-13T05:19:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Edit_Existing_Role_via_Action_Menu(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Edit_Existing_Role_via_Action_Menu(org.testng.ITestContext)[pri:9, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:25 IST" name="Edit_Existing_Role_via_Action_Menu" finished-at="2025-05-13T05:19:42 IST" duration-ms="16469" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_Existing_Role_via_Action_Menu -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:42 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:19:42 IST" duration-ms="66" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Edit_Existing_Role_via_Action_Menu status=SUCCESS method=RoleManagement_TestClass.Edit_Existing_Role_via_Action_Menu(org.testng.ITestContext)[pri:9, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:42 IST" name="setupTest" finished-at="2025-05-13T05:19:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Update_Role_Functionalities(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Update_Role_Functionalities(org.testng.ITestContext)[pri:10, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:19:42 IST" name="Update_Role_Functionalities" finished-at="2025-05-13T05:20:05 IST" duration-ms="23047" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Update_Role_Functionalities -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:05 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:20:05 IST" duration-ms="62" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Update_Role_Functionalities status=SUCCESS method=RoleManagement_TestClass.Update_Role_Functionalities(org.testng.ITestContext)[pri:10, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Readd_Existing_Role(org.testng.ITestContext)[pri:11, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:05 IST" name="Readd_Existing_Role" finished-at="2025-05-13T05:20:52 IST" duration-ms="46474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Readd_Existing_Role -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:05 IST" name="setupTest" finished-at="2025-05-13T05:20:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Readd_Existing_Role(org.testng.ITestContext) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:52 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:20:52 IST" duration-ms="63" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Readd_Existing_Role status=SUCCESS method=RoleManagement_TestClass.Readd_Existing_Role(org.testng.ITestContext)[pri:11, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:52 IST" name="setupTest" finished-at="2025-05-13T05:20:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CallCentre.SecurityManagement.RoleManagement_TestClass.Error_Guessing_Functionality_Not_Selected(org.testng.ITestContext) throws java.lang.InterruptedException,java.io.IOException,java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Error_Guessing_Functionality_Not_Selected(org.testng.ITestContext)[pri:12, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:52 IST" name="Error_Guessing_Functionality_Not_Selected" finished-at="2025-05-13T05:20:59 IST" duration-ms="7502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@1c3de420]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Error_Guessing_Functionality_Not_Selected -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:59 IST" name="takeScreenshotOnFailure" finished-at="2025-05-13T05:20:59 IST" duration-ms="62" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Error_Guessing_Functionality_Not_Selected status=SUCCESS method=RoleManagement_TestClass.Error_Guessing_Functionality_Not_Selected(org.testng.ITestContext)[pri:12, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:CallCentre.SecurityManagement.RoleManagement_TestClass@59505b48]" started-at="2025-05-13T05:20:59 IST" name="afterclass" finished-at="2025-05-13T05:21:00 IST" duration-ms="1058" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- CallCentre.SecurityManagement.RoleManagement_TestClass -->
    </test> <!-- Call centre - Security management -->
  </suite> <!-- Beacon FCM Regression Automation Suite -->
</testng-results>
